import { z } from "zod"

export default z.object({ "icon": z.string().regex(new RegExp("^[^\\s]+(?:[ ]*[^\\s]+)*$")).describe("A 512x512 icon representing the extension. It will be displayed in the Store and in Preferences. If any of the extension's commands doesn't have an icon, it will 'inherit' the extension's icon. Please note that light and dark themes are supported; just append '@dark' to the filename for the dark theme and the correct icon will be picked at run-time. For example, set for this property 'icon.png' and put in the assets folder the 'icon.png' and 'icon@dark.png' files."), "name": z.string().regex(new RegExp("^(@workaround/)?[a-z0-9-~][a-z0-9-_~]*$")).min(3).max(255).describe("The slugged extension's name used internally as identifier and in the store as part of the URL."), "debug": z.object({ "reloadShortcut": z.object({ "key": z.string().min(1).max(2).describe("The keyboard key pressed with the modifier to trigger an action (e.g. ⌘ + B)"), "modifiers": z.array(z.enum(["command","option","control","shift"])).min(1).max(4).describe("Such as the command modifier (⌘), option modifier (⌥), control modifier (⌃), or shift modifier (⇧).") }).strict().describe("Keyboard shortcut used to refresh/reload a command while the Vicinae window is focused.").optional() }).describe("Compilation and run-time options to improve development experience.").optional(), "owner": z.string().regex(new RegExp("^[a-zA-Z0-9-*~][a-zA-Z0-9-*._~]*$")).min(2).max(75).describe("User ultimately responsible for the extension. The extension's store URL is composed of the owner username and the extension's name.").optional(), "title": z.string().regex(new RegExp("^[^\\s]+(?: [^\\s]+)*$")).min(2).max(255).describe("The extension title will be displayed in the Store and in Preferences."), "access": z.enum(["public","private"]).describe("Public extensions are downloadable by anybody, while private extensions can only be downloaded by a member of a given organization.").optional(), "author": z.string().regex(new RegExp("^[a-zA-Z0-9-*~][a-zA-Z0-9-*._~]*$")).min(2).max(75).describe("User currently contributing the most to the extension."), "license": z.literal("MIT").describe("Currently only MIT is accepted, although more licenses will probably be available in the future."), "platforms": z.array(z.enum(["macOS","Windows"])).min(1).describe("Currently only `macOS` and `Windows` are accepted. If not present, the extension is assumed to be available on all platforms.").optional(), "commands": z.array(z.object({ "icon": z.string().regex(new RegExp("^[^\\s]+(?:[ ]*[^\\s]+)*$")).describe("A 512x512 icon representing the command. It will be displayed in Preferences and Vicinae root search. If a command doesn't have an icon, it will 'inherit' the extension's icon. Please note that light and dark themes are supported; just append '@dark' or '@light' to the icons name and the correct icon will be picked at run-time. For example, write for this property 'icon.png' and have in the assets folder the 'icon@light.png' and 'icon@dark.png' assets.").optional(), "mode": z.enum(["view","no-view","menu-bar"]).describe("A value of 'view' indicates that the command will show a main view when performed. 'no-view' means that the command does not push a view to the main navigation stack in Vicinae. The latter is handy for directly opening URL or other API functionality that doesn't require a user interface. 'menu-bar' renders an extra item in the macOS system menu bar at the top of the screen."), "name": z.string().regex(new RegExp("^[a-z0-9-~][a-zA-Z0-9-._~]*$")).min(2).max(255).describe("The name directly maps to the entry point file for the command. So a command named 'index' would map to 'src/index.ts' (or any other supported TypeScript or JavaScript file extension such as .tsx, .js, .jsx)."), "title": z.string().regex(new RegExp("^[^\\s]+(?: [^\\s]+)*$")).min(2).max(255).describe("The command title will be displayed in the Store, Preferences, and in Vicinae's root search."), "keywords": z.any().optional(), "subtitle": z.string().regex(new RegExp("^[^\\s]+(?: [^\\s]+)*$")).min(2).max(255).describe("The subtitle (if any) will be displayed next to the command name in the root search. It helps user differentiate potentially similar commands. For example, a Google Suite extension may define 2 commands titled 'Create Document'. To differentiate them, one of the subtitle can be 'Google Docs' while the other can be 'Google Sheets'.").optional(), "description": z.string().regex(new RegExp("^[^\\s]+(\\s+[^\\s]+)*$")).min(0).max(2048).describe("It helps users understand what the command does. It will be displayed in the Store and in Preferences."), "interval": z.string().regex(new RegExp("^(\\d+)(s|m|h|d)$")).describe("The value specifies that a no-view or menu-bar command should be launched in the background every X seconds (s), minutes (m), hours (h) or days (d). Examples: 90s, 1m, 12h, 1d. The minimum value is 10 seconds (10s).").optional(), "preferences": z.any().describe("Commands can optionally contribute preferences that are shown in Vicinae Preferences > Extensions when selecting the command. You can use preferences for configuration values and passwords or personal access tokens. Commands automatically \"inherit\" extension preferences and can also override entries with the same `name`.").optional(), "arguments": z.any().describe("An optional array of arguments that are requested from user when the command is called").optional(), "disabledByDefault": z.boolean().describe("Defaults to `false`").optional() }).catchall(z.any())).min(1).max(100).describe("List of all commands vended by this extensions. An extension must contain at least one command."), "tools": z.array(z.object({ "icon": z.string().regex(new RegExp("^[^\\s]+(?:[ ]*[^\\s]+)*$")).describe("A 512x512 icon representing the tool. It will be displayed in various places across Vicinae. If a tool doesn't have an icon, it will 'inherit' the extension's icon. Please note that light and dark themes are supported; just append '@dark' or '@light' to the icons name and the correct icon will be picked at run-time. For example, write for this property 'icon.png' and have in the assets folder the 'icon@light.png' and 'icon@dark.png' assets.").optional(), "name": z.string().regex(new RegExp("^[a-z0-9-][a-zA-Z0-9-_]*$")).min(2).max(64).describe("The name directly maps to the entry point file for the tool. So a tool named 'index' would map to 'src/tools/index.ts' (or any other supported TypeScript or JavaScript file extension such as .tsx, .js, .jsx)."), "title": z.string().regex(new RegExp("^[^\\s]+(?: [^\\s]+)*$")).min(2).max(255).describe("The tool title will be displayed in the Store, Preferences, and any other places the tool might be referenced in the Vicinae UI."), "keywords": z.any().optional(), "description": z.string().regex(new RegExp("^[^\\s]+(\\s+[^\\s]+)*$")).min(12).max(2048).describe("It helps users (and other actors like AI) understand what the tool does. It will be displayed in the Store and in Preferences."), "functionalities": z.array(z.enum(["AI attachment provider","AI tool"])).describe("Limits the tool to the specified functionalities. If not specified, the tool can be used in any context (if it matches the requirements for each of them).").optional(), "preferences": z.any().describe("Tools can optionally contribute preferences that are shown in Vicinae Preferences > Extensions when selecting the AI Extension item. You can use preferences for configuration values and passwords or personal access tokens. Tools automatically \"inherit\" extension preferences and can also override entries with the same `name`.").optional() }).catchall(z.any())).min(0).max(100).describe("List of all tools that the AI can use to interact with this extension.").optional(), "ai": z.object({ "instructions": z.string().describe("Additional system instructions added when the tools are used in AI").optional(), "evals": z.array(z.object({ "input": z.string().describe("The prompt to evaluate"), "usedAsExample": z.boolean().describe("Whether the eval can be used as an example in Vicinae (default `true`)").optional() })).describe("List of tests to evaluate the reliability of the tools when used in AI").optional() }).describe("Additional information related to the AI capabilities of the extension").optional(), "keywords": z.any().optional(), "description": z.string().regex(new RegExp("^[^\\s]+(\\s+[^\\s]+)*$")).min(16).max(2048).describe("It helps users understand what the extension does. It will be displayed in the Store and in Preferences."), "preferences": z.any().describe("Extensions can contribute preferences that are shown in Vicinae Preferences > Extensions. You can use preferences for configuration values and passwords or personal access tokens.").optional(), "categories": z.array(z.string()).optional(), "contributors": z.array(z.string().regex(new RegExp("^[a-zA-Z0-9-*~][a-zA-Z0-9-*._~]*$")).min(2).max(75)).min(0).describe("Users who have meaningfully contributed to the extension's commands.").optional(), "pastContributors": z.array(z.string().regex(new RegExp("^[a-zA-Z0-9-*~][a-zA-Z0-9-*._~]*$")).min(2).max(75)).min(0).describe("Users who have meaningfully contributed to the extension's commands but do not maintain it anymore.").optional(), "dependencies": z.object({ "@raycast/api": z.string().describe("The Vicinae API version used by this extension.").optional() }).describe("Source dependencies following the npm package.json dependency format."), "external": z.array(z.string()).describe("An Array of package or file names that should be excluded from the build. The package will not be bundled, but the import is preserved and will be evaluated at runtime.").optional() })

