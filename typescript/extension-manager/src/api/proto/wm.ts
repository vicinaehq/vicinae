// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: wm.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Application } from "./application";

export const protobufPackage = "proto.ext.wm";

export interface Window {
  id: string;
  workspaceId: string;
  active: boolean;
  fullscreen: boolean;
  x: number;
  y: number;
  width: number;
  height: number;
  app?: Application | undefined;
}

export interface Workspace {
  id: string;
  name: string;
  active: boolean;
  fullscreen: boolean;
  monitor: string;
}

export interface PingRequest {
}

export interface PingResponse {
  ok: boolean;
}

export interface GetActiveWindowRequest {
}

export interface GetActiveWindowResponse {
  window: Window | undefined;
}

export interface GetWorkspacesRequest {
}

export interface GetWorkspacesResponse {
  workspaces: Workspace[];
}

export interface GetActiveWorkspaceRequest {
}

export interface GetActiveWorkspaceResponse {
  workspace: Workspace | undefined;
}

export interface GetActiveWorkspaceWindowsRequest {
}

export interface GetActiveWorkspaceWindowsResponse {
  windows: Window[];
}

export interface GetWindowsRequest {
  workspaceId?: string | undefined;
}

export interface GetWindowsResponse {
  windows: Window[];
}

export interface SetWindowBoundsRequest {
  id: string;
  workspaceId?: string | undefined;
}

export interface SetWindowBoundsResponse {
}

export interface Request {
  ping?: PingRequest | undefined;
  getActiveWindow?: GetActiveWindowRequest | undefined;
  getActiveWorkspace?: GetActiveWorkspaceRequest | undefined;
  getWindows?: GetWindowsRequest | undefined;
  getWorkspaces?: GetWorkspacesRequest | undefined;
  setWindowBounds?: SetWindowBoundsRequest | undefined;
}

export interface Response {
  ping?: PingResponse | undefined;
  getActiveWindow?: GetActiveWindowResponse | undefined;
  getActiveWorkspace?: GetActiveWorkspaceResponse | undefined;
  getWindows?: GetWindowsResponse | undefined;
  getWorkspaces?: GetWorkspacesResponse | undefined;
  setWindowBounds?: SetWindowBoundsResponse | undefined;
}

function createBaseWindow(): Window {
  return { id: "", workspaceId: "", active: false, fullscreen: false, x: 0, y: 0, width: 0, height: 0, app: undefined };
}

export const Window: MessageFns<Window> = {
  encode(message: Window, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.workspaceId !== "") {
      writer.uint32(18).string(message.workspaceId);
    }
    if (message.active !== false) {
      writer.uint32(24).bool(message.active);
    }
    if (message.fullscreen !== false) {
      writer.uint32(32).bool(message.fullscreen);
    }
    if (message.x !== 0) {
      writer.uint32(40).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(48).int32(message.y);
    }
    if (message.width !== 0) {
      writer.uint32(56).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(64).int32(message.height);
    }
    if (message.app !== undefined) {
      Application.encode(message.app, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Window {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWindow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workspaceId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fullscreen = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.app = Application.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Window {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      workspaceId: isSet(object.workspaceId) ? globalThis.String(object.workspaceId) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      fullscreen: isSet(object.fullscreen) ? globalThis.Boolean(object.fullscreen) : false,
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      app: isSet(object.app) ? Application.fromJSON(object.app) : undefined,
    };
  },

  toJSON(message: Window): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.workspaceId !== "") {
      obj.workspaceId = message.workspaceId;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    if (message.fullscreen !== false) {
      obj.fullscreen = message.fullscreen;
    }
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.app !== undefined) {
      obj.app = Application.toJSON(message.app);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Window>, I>>(base?: I): Window {
    return Window.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Window>, I>>(object: I): Window {
    const message = createBaseWindow();
    message.id = object.id ?? "";
    message.workspaceId = object.workspaceId ?? "";
    message.active = object.active ?? false;
    message.fullscreen = object.fullscreen ?? false;
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.app = (object.app !== undefined && object.app !== null) ? Application.fromPartial(object.app) : undefined;
    return message;
  },
};

function createBaseWorkspace(): Workspace {
  return { id: "", name: "", active: false, fullscreen: false, monitor: "" };
}

export const Workspace: MessageFns<Workspace> = {
  encode(message: Workspace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.active !== false) {
      writer.uint32(24).bool(message.active);
    }
    if (message.fullscreen !== false) {
      writer.uint32(32).bool(message.fullscreen);
    }
    if (message.monitor !== "") {
      writer.uint32(42).string(message.monitor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Workspace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fullscreen = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.monitor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Workspace {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      fullscreen: isSet(object.fullscreen) ? globalThis.Boolean(object.fullscreen) : false,
      monitor: isSet(object.monitor) ? globalThis.String(object.monitor) : "",
    };
  },

  toJSON(message: Workspace): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    if (message.fullscreen !== false) {
      obj.fullscreen = message.fullscreen;
    }
    if (message.monitor !== "") {
      obj.monitor = message.monitor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Workspace>, I>>(base?: I): Workspace {
    return Workspace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Workspace>, I>>(object: I): Workspace {
    const message = createBaseWorkspace();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.active = object.active ?? false;
    message.fullscreen = object.fullscreen ?? false;
    message.monitor = object.monitor ?? "";
    return message;
  },
};

function createBasePingRequest(): PingRequest {
  return {};
}

export const PingRequest: MessageFns<PingRequest> = {
  encode(_: PingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PingRequest {
    return {};
  },

  toJSON(_: PingRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PingRequest>, I>>(base?: I): PingRequest {
    return PingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingRequest>, I>>(_: I): PingRequest {
    const message = createBasePingRequest();
    return message;
  },
};

function createBasePingResponse(): PingResponse {
  return { ok: false };
}

export const PingResponse: MessageFns<PingResponse> = {
  encode(message: PingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ok !== false) {
      writer.uint32(8).bool(message.ok);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ok = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingResponse {
    return { ok: isSet(object.ok) ? globalThis.Boolean(object.ok) : false };
  },

  toJSON(message: PingResponse): unknown {
    const obj: any = {};
    if (message.ok !== false) {
      obj.ok = message.ok;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PingResponse>, I>>(base?: I): PingResponse {
    return PingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingResponse>, I>>(object: I): PingResponse {
    const message = createBasePingResponse();
    message.ok = object.ok ?? false;
    return message;
  },
};

function createBaseGetActiveWindowRequest(): GetActiveWindowRequest {
  return {};
}

export const GetActiveWindowRequest: MessageFns<GetActiveWindowRequest> = {
  encode(_: GetActiveWindowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActiveWindowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActiveWindowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetActiveWindowRequest {
    return {};
  },

  toJSON(_: GetActiveWindowRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetActiveWindowRequest>, I>>(base?: I): GetActiveWindowRequest {
    return GetActiveWindowRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetActiveWindowRequest>, I>>(_: I): GetActiveWindowRequest {
    const message = createBaseGetActiveWindowRequest();
    return message;
  },
};

function createBaseGetActiveWindowResponse(): GetActiveWindowResponse {
  return { window: undefined };
}

export const GetActiveWindowResponse: MessageFns<GetActiveWindowResponse> = {
  encode(message: GetActiveWindowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.window !== undefined) {
      Window.encode(message.window, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActiveWindowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActiveWindowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.window = Window.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetActiveWindowResponse {
    return { window: isSet(object.window) ? Window.fromJSON(object.window) : undefined };
  },

  toJSON(message: GetActiveWindowResponse): unknown {
    const obj: any = {};
    if (message.window !== undefined) {
      obj.window = Window.toJSON(message.window);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetActiveWindowResponse>, I>>(base?: I): GetActiveWindowResponse {
    return GetActiveWindowResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetActiveWindowResponse>, I>>(object: I): GetActiveWindowResponse {
    const message = createBaseGetActiveWindowResponse();
    message.window = (object.window !== undefined && object.window !== null)
      ? Window.fromPartial(object.window)
      : undefined;
    return message;
  },
};

function createBaseGetWorkspacesRequest(): GetWorkspacesRequest {
  return {};
}

export const GetWorkspacesRequest: MessageFns<GetWorkspacesRequest> = {
  encode(_: GetWorkspacesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkspacesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkspacesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetWorkspacesRequest {
    return {};
  },

  toJSON(_: GetWorkspacesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWorkspacesRequest>, I>>(base?: I): GetWorkspacesRequest {
    return GetWorkspacesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWorkspacesRequest>, I>>(_: I): GetWorkspacesRequest {
    const message = createBaseGetWorkspacesRequest();
    return message;
  },
};

function createBaseGetWorkspacesResponse(): GetWorkspacesResponse {
  return { workspaces: [] };
}

export const GetWorkspacesResponse: MessageFns<GetWorkspacesResponse> = {
  encode(message: GetWorkspacesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workspaces) {
      Workspace.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkspacesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkspacesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workspaces.push(Workspace.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkspacesResponse {
    return {
      workspaces: globalThis.Array.isArray(object?.workspaces)
        ? object.workspaces.map((e: any) => Workspace.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetWorkspacesResponse): unknown {
    const obj: any = {};
    if (message.workspaces?.length) {
      obj.workspaces = message.workspaces.map((e) => Workspace.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWorkspacesResponse>, I>>(base?: I): GetWorkspacesResponse {
    return GetWorkspacesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWorkspacesResponse>, I>>(object: I): GetWorkspacesResponse {
    const message = createBaseGetWorkspacesResponse();
    message.workspaces = object.workspaces?.map((e) => Workspace.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetActiveWorkspaceRequest(): GetActiveWorkspaceRequest {
  return {};
}

export const GetActiveWorkspaceRequest: MessageFns<GetActiveWorkspaceRequest> = {
  encode(_: GetActiveWorkspaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActiveWorkspaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActiveWorkspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetActiveWorkspaceRequest {
    return {};
  },

  toJSON(_: GetActiveWorkspaceRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetActiveWorkspaceRequest>, I>>(base?: I): GetActiveWorkspaceRequest {
    return GetActiveWorkspaceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetActiveWorkspaceRequest>, I>>(_: I): GetActiveWorkspaceRequest {
    const message = createBaseGetActiveWorkspaceRequest();
    return message;
  },
};

function createBaseGetActiveWorkspaceResponse(): GetActiveWorkspaceResponse {
  return { workspace: undefined };
}

export const GetActiveWorkspaceResponse: MessageFns<GetActiveWorkspaceResponse> = {
  encode(message: GetActiveWorkspaceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workspace !== undefined) {
      Workspace.encode(message.workspace, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActiveWorkspaceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActiveWorkspaceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workspace = Workspace.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetActiveWorkspaceResponse {
    return { workspace: isSet(object.workspace) ? Workspace.fromJSON(object.workspace) : undefined };
  },

  toJSON(message: GetActiveWorkspaceResponse): unknown {
    const obj: any = {};
    if (message.workspace !== undefined) {
      obj.workspace = Workspace.toJSON(message.workspace);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetActiveWorkspaceResponse>, I>>(base?: I): GetActiveWorkspaceResponse {
    return GetActiveWorkspaceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetActiveWorkspaceResponse>, I>>(object: I): GetActiveWorkspaceResponse {
    const message = createBaseGetActiveWorkspaceResponse();
    message.workspace = (object.workspace !== undefined && object.workspace !== null)
      ? Workspace.fromPartial(object.workspace)
      : undefined;
    return message;
  },
};

function createBaseGetActiveWorkspaceWindowsRequest(): GetActiveWorkspaceWindowsRequest {
  return {};
}

export const GetActiveWorkspaceWindowsRequest: MessageFns<GetActiveWorkspaceWindowsRequest> = {
  encode(_: GetActiveWorkspaceWindowsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActiveWorkspaceWindowsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActiveWorkspaceWindowsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetActiveWorkspaceWindowsRequest {
    return {};
  },

  toJSON(_: GetActiveWorkspaceWindowsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetActiveWorkspaceWindowsRequest>, I>>(
    base?: I,
  ): GetActiveWorkspaceWindowsRequest {
    return GetActiveWorkspaceWindowsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetActiveWorkspaceWindowsRequest>, I>>(
    _: I,
  ): GetActiveWorkspaceWindowsRequest {
    const message = createBaseGetActiveWorkspaceWindowsRequest();
    return message;
  },
};

function createBaseGetActiveWorkspaceWindowsResponse(): GetActiveWorkspaceWindowsResponse {
  return { windows: [] };
}

export const GetActiveWorkspaceWindowsResponse: MessageFns<GetActiveWorkspaceWindowsResponse> = {
  encode(message: GetActiveWorkspaceWindowsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.windows) {
      Window.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActiveWorkspaceWindowsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActiveWorkspaceWindowsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.windows.push(Window.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetActiveWorkspaceWindowsResponse {
    return {
      windows: globalThis.Array.isArray(object?.windows) ? object.windows.map((e: any) => Window.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetActiveWorkspaceWindowsResponse): unknown {
    const obj: any = {};
    if (message.windows?.length) {
      obj.windows = message.windows.map((e) => Window.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetActiveWorkspaceWindowsResponse>, I>>(
    base?: I,
  ): GetActiveWorkspaceWindowsResponse {
    return GetActiveWorkspaceWindowsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetActiveWorkspaceWindowsResponse>, I>>(
    object: I,
  ): GetActiveWorkspaceWindowsResponse {
    const message = createBaseGetActiveWorkspaceWindowsResponse();
    message.windows = object.windows?.map((e) => Window.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetWindowsRequest(): GetWindowsRequest {
  return { workspaceId: undefined };
}

export const GetWindowsRequest: MessageFns<GetWindowsRequest> = {
  encode(message: GetWindowsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workspaceId !== undefined) {
      writer.uint32(10).string(message.workspaceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWindowsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWindowsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workspaceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWindowsRequest {
    return { workspaceId: isSet(object.workspaceId) ? globalThis.String(object.workspaceId) : undefined };
  },

  toJSON(message: GetWindowsRequest): unknown {
    const obj: any = {};
    if (message.workspaceId !== undefined) {
      obj.workspaceId = message.workspaceId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWindowsRequest>, I>>(base?: I): GetWindowsRequest {
    return GetWindowsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWindowsRequest>, I>>(object: I): GetWindowsRequest {
    const message = createBaseGetWindowsRequest();
    message.workspaceId = object.workspaceId ?? undefined;
    return message;
  },
};

function createBaseGetWindowsResponse(): GetWindowsResponse {
  return { windows: [] };
}

export const GetWindowsResponse: MessageFns<GetWindowsResponse> = {
  encode(message: GetWindowsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.windows) {
      Window.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWindowsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWindowsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.windows.push(Window.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWindowsResponse {
    return {
      windows: globalThis.Array.isArray(object?.windows) ? object.windows.map((e: any) => Window.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetWindowsResponse): unknown {
    const obj: any = {};
    if (message.windows?.length) {
      obj.windows = message.windows.map((e) => Window.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWindowsResponse>, I>>(base?: I): GetWindowsResponse {
    return GetWindowsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWindowsResponse>, I>>(object: I): GetWindowsResponse {
    const message = createBaseGetWindowsResponse();
    message.windows = object.windows?.map((e) => Window.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSetWindowBoundsRequest(): SetWindowBoundsRequest {
  return { id: "", workspaceId: undefined };
}

export const SetWindowBoundsRequest: MessageFns<SetWindowBoundsRequest> = {
  encode(message: SetWindowBoundsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.workspaceId !== undefined) {
      writer.uint32(26).string(message.workspaceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetWindowBoundsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetWindowBoundsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.workspaceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetWindowBoundsRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      workspaceId: isSet(object.workspaceId) ? globalThis.String(object.workspaceId) : undefined,
    };
  },

  toJSON(message: SetWindowBoundsRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.workspaceId !== undefined) {
      obj.workspaceId = message.workspaceId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetWindowBoundsRequest>, I>>(base?: I): SetWindowBoundsRequest {
    return SetWindowBoundsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetWindowBoundsRequest>, I>>(object: I): SetWindowBoundsRequest {
    const message = createBaseSetWindowBoundsRequest();
    message.id = object.id ?? "";
    message.workspaceId = object.workspaceId ?? undefined;
    return message;
  },
};

function createBaseSetWindowBoundsResponse(): SetWindowBoundsResponse {
  return {};
}

export const SetWindowBoundsResponse: MessageFns<SetWindowBoundsResponse> = {
  encode(_: SetWindowBoundsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetWindowBoundsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetWindowBoundsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetWindowBoundsResponse {
    return {};
  },

  toJSON(_: SetWindowBoundsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetWindowBoundsResponse>, I>>(base?: I): SetWindowBoundsResponse {
    return SetWindowBoundsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetWindowBoundsResponse>, I>>(_: I): SetWindowBoundsResponse {
    const message = createBaseSetWindowBoundsResponse();
    return message;
  },
};

function createBaseRequest(): Request {
  return {
    ping: undefined,
    getActiveWindow: undefined,
    getActiveWorkspace: undefined,
    getWindows: undefined,
    getWorkspaces: undefined,
    setWindowBounds: undefined,
  };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ping !== undefined) {
      PingRequest.encode(message.ping, writer.uint32(10).fork()).join();
    }
    if (message.getActiveWindow !== undefined) {
      GetActiveWindowRequest.encode(message.getActiveWindow, writer.uint32(18).fork()).join();
    }
    if (message.getActiveWorkspace !== undefined) {
      GetActiveWorkspaceRequest.encode(message.getActiveWorkspace, writer.uint32(26).fork()).join();
    }
    if (message.getWindows !== undefined) {
      GetWindowsRequest.encode(message.getWindows, writer.uint32(34).fork()).join();
    }
    if (message.getWorkspaces !== undefined) {
      GetWorkspacesRequest.encode(message.getWorkspaces, writer.uint32(42).fork()).join();
    }
    if (message.setWindowBounds !== undefined) {
      SetWindowBoundsRequest.encode(message.setWindowBounds, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ping = PingRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.getActiveWindow = GetActiveWindowRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.getActiveWorkspace = GetActiveWorkspaceRequest.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.getWindows = GetWindowsRequest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.getWorkspaces = GetWorkspacesRequest.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.setWindowBounds = SetWindowBoundsRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      ping: isSet(object.ping) ? PingRequest.fromJSON(object.ping) : undefined,
      getActiveWindow: isSet(object.getActiveWindow)
        ? GetActiveWindowRequest.fromJSON(object.getActiveWindow)
        : undefined,
      getActiveWorkspace: isSet(object.getActiveWorkspace)
        ? GetActiveWorkspaceRequest.fromJSON(object.getActiveWorkspace)
        : undefined,
      getWindows: isSet(object.getWindows) ? GetWindowsRequest.fromJSON(object.getWindows) : undefined,
      getWorkspaces: isSet(object.getWorkspaces) ? GetWorkspacesRequest.fromJSON(object.getWorkspaces) : undefined,
      setWindowBounds: isSet(object.setWindowBounds)
        ? SetWindowBoundsRequest.fromJSON(object.setWindowBounds)
        : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.ping !== undefined) {
      obj.ping = PingRequest.toJSON(message.ping);
    }
    if (message.getActiveWindow !== undefined) {
      obj.getActiveWindow = GetActiveWindowRequest.toJSON(message.getActiveWindow);
    }
    if (message.getActiveWorkspace !== undefined) {
      obj.getActiveWorkspace = GetActiveWorkspaceRequest.toJSON(message.getActiveWorkspace);
    }
    if (message.getWindows !== undefined) {
      obj.getWindows = GetWindowsRequest.toJSON(message.getWindows);
    }
    if (message.getWorkspaces !== undefined) {
      obj.getWorkspaces = GetWorkspacesRequest.toJSON(message.getWorkspaces);
    }
    if (message.setWindowBounds !== undefined) {
      obj.setWindowBounds = SetWindowBoundsRequest.toJSON(message.setWindowBounds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.ping = (object.ping !== undefined && object.ping !== null)
      ? PingRequest.fromPartial(object.ping)
      : undefined;
    message.getActiveWindow = (object.getActiveWindow !== undefined && object.getActiveWindow !== null)
      ? GetActiveWindowRequest.fromPartial(object.getActiveWindow)
      : undefined;
    message.getActiveWorkspace = (object.getActiveWorkspace !== undefined && object.getActiveWorkspace !== null)
      ? GetActiveWorkspaceRequest.fromPartial(object.getActiveWorkspace)
      : undefined;
    message.getWindows = (object.getWindows !== undefined && object.getWindows !== null)
      ? GetWindowsRequest.fromPartial(object.getWindows)
      : undefined;
    message.getWorkspaces = (object.getWorkspaces !== undefined && object.getWorkspaces !== null)
      ? GetWorkspacesRequest.fromPartial(object.getWorkspaces)
      : undefined;
    message.setWindowBounds = (object.setWindowBounds !== undefined && object.setWindowBounds !== null)
      ? SetWindowBoundsRequest.fromPartial(object.setWindowBounds)
      : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return {
    ping: undefined,
    getActiveWindow: undefined,
    getActiveWorkspace: undefined,
    getWindows: undefined,
    getWorkspaces: undefined,
    setWindowBounds: undefined,
  };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ping !== undefined) {
      PingResponse.encode(message.ping, writer.uint32(10).fork()).join();
    }
    if (message.getActiveWindow !== undefined) {
      GetActiveWindowResponse.encode(message.getActiveWindow, writer.uint32(18).fork()).join();
    }
    if (message.getActiveWorkspace !== undefined) {
      GetActiveWorkspaceResponse.encode(message.getActiveWorkspace, writer.uint32(26).fork()).join();
    }
    if (message.getWindows !== undefined) {
      GetWindowsResponse.encode(message.getWindows, writer.uint32(34).fork()).join();
    }
    if (message.getWorkspaces !== undefined) {
      GetWorkspacesResponse.encode(message.getWorkspaces, writer.uint32(42).fork()).join();
    }
    if (message.setWindowBounds !== undefined) {
      SetWindowBoundsResponse.encode(message.setWindowBounds, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ping = PingResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.getActiveWindow = GetActiveWindowResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.getActiveWorkspace = GetActiveWorkspaceResponse.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.getWindows = GetWindowsResponse.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.getWorkspaces = GetWorkspacesResponse.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.setWindowBounds = SetWindowBoundsResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      ping: isSet(object.ping) ? PingResponse.fromJSON(object.ping) : undefined,
      getActiveWindow: isSet(object.getActiveWindow)
        ? GetActiveWindowResponse.fromJSON(object.getActiveWindow)
        : undefined,
      getActiveWorkspace: isSet(object.getActiveWorkspace)
        ? GetActiveWorkspaceResponse.fromJSON(object.getActiveWorkspace)
        : undefined,
      getWindows: isSet(object.getWindows) ? GetWindowsResponse.fromJSON(object.getWindows) : undefined,
      getWorkspaces: isSet(object.getWorkspaces) ? GetWorkspacesResponse.fromJSON(object.getWorkspaces) : undefined,
      setWindowBounds: isSet(object.setWindowBounds)
        ? SetWindowBoundsResponse.fromJSON(object.setWindowBounds)
        : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.ping !== undefined) {
      obj.ping = PingResponse.toJSON(message.ping);
    }
    if (message.getActiveWindow !== undefined) {
      obj.getActiveWindow = GetActiveWindowResponse.toJSON(message.getActiveWindow);
    }
    if (message.getActiveWorkspace !== undefined) {
      obj.getActiveWorkspace = GetActiveWorkspaceResponse.toJSON(message.getActiveWorkspace);
    }
    if (message.getWindows !== undefined) {
      obj.getWindows = GetWindowsResponse.toJSON(message.getWindows);
    }
    if (message.getWorkspaces !== undefined) {
      obj.getWorkspaces = GetWorkspacesResponse.toJSON(message.getWorkspaces);
    }
    if (message.setWindowBounds !== undefined) {
      obj.setWindowBounds = SetWindowBoundsResponse.toJSON(message.setWindowBounds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.ping = (object.ping !== undefined && object.ping !== null)
      ? PingResponse.fromPartial(object.ping)
      : undefined;
    message.getActiveWindow = (object.getActiveWindow !== undefined && object.getActiveWindow !== null)
      ? GetActiveWindowResponse.fromPartial(object.getActiveWindow)
      : undefined;
    message.getActiveWorkspace = (object.getActiveWorkspace !== undefined && object.getActiveWorkspace !== null)
      ? GetActiveWorkspaceResponse.fromPartial(object.getActiveWorkspace)
      : undefined;
    message.getWindows = (object.getWindows !== undefined && object.getWindows !== null)
      ? GetWindowsResponse.fromPartial(object.getWindows)
      : undefined;
    message.getWorkspaces = (object.getWorkspaces !== undefined && object.getWorkspaces !== null)
      ? GetWorkspacesResponse.fromPartial(object.getWorkspaces)
      : undefined;
    message.setWindowBounds = (object.setWindowBounds !== undefined && object.setWindowBounds !== null)
      ? SetWindowBoundsResponse.fromPartial(object.setWindowBounds)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
