// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: ipc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ErrorResponse } from "./common";
import { Event, Request, Response } from "./extension";
import { RequestData, ResponseData } from "./manager";

export const protobufPackage = "proto.ext";

export interface IpcMessage {
  extensionRequest?: QualifiedExtensionRequest | undefined;
  extensionResponse?: QualifiedExtensionResponse | undefined;
  extensionEvent?: QualifiedExtensionEvent | undefined;
  managerRequest?: ManagerRequest | undefined;
  managerResponse?: ManagerResponse | undefined;
}

export interface ManagerRequest {
  requestId: string;
  payload: RequestData | undefined;
}

export interface ManagerResponse {
  requestId: string;
  value?: ResponseData | undefined;
  error?: ErrorResponse | undefined;
}

export interface QualifiedExtensionRequest {
  sessionId: string;
  request: Request | undefined;
}

export interface QualifiedExtensionResponse {
  sessionId: string;
  response: Response | undefined;
}

export interface QualifiedExtensionEvent {
  sessionId: string;
  event: Event | undefined;
}

export interface ExtensionMessage {
  request?: Request | undefined;
  response?: Response | undefined;
  event?: Event | undefined;
}

function createBaseIpcMessage(): IpcMessage {
  return {
    extensionRequest: undefined,
    extensionResponse: undefined,
    extensionEvent: undefined,
    managerRequest: undefined,
    managerResponse: undefined,
  };
}

export const IpcMessage: MessageFns<IpcMessage> = {
  encode(message: IpcMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.extensionRequest !== undefined) {
      QualifiedExtensionRequest.encode(message.extensionRequest, writer.uint32(10).fork()).join();
    }
    if (message.extensionResponse !== undefined) {
      QualifiedExtensionResponse.encode(message.extensionResponse, writer.uint32(18).fork()).join();
    }
    if (message.extensionEvent !== undefined) {
      QualifiedExtensionEvent.encode(message.extensionEvent, writer.uint32(26).fork()).join();
    }
    if (message.managerRequest !== undefined) {
      ManagerRequest.encode(message.managerRequest, writer.uint32(34).fork()).join();
    }
    if (message.managerResponse !== undefined) {
      ManagerResponse.encode(message.managerResponse, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IpcMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIpcMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.extensionRequest = QualifiedExtensionRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.extensionResponse = QualifiedExtensionResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.extensionEvent = QualifiedExtensionEvent.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.managerRequest = ManagerRequest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.managerResponse = ManagerResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IpcMessage {
    return {
      extensionRequest: isSet(object.extensionRequest)
        ? QualifiedExtensionRequest.fromJSON(object.extensionRequest)
        : undefined,
      extensionResponse: isSet(object.extensionResponse)
        ? QualifiedExtensionResponse.fromJSON(object.extensionResponse)
        : undefined,
      extensionEvent: isSet(object.extensionEvent)
        ? QualifiedExtensionEvent.fromJSON(object.extensionEvent)
        : undefined,
      managerRequest: isSet(object.managerRequest) ? ManagerRequest.fromJSON(object.managerRequest) : undefined,
      managerResponse: isSet(object.managerResponse) ? ManagerResponse.fromJSON(object.managerResponse) : undefined,
    };
  },

  toJSON(message: IpcMessage): unknown {
    const obj: any = {};
    if (message.extensionRequest !== undefined) {
      obj.extensionRequest = QualifiedExtensionRequest.toJSON(message.extensionRequest);
    }
    if (message.extensionResponse !== undefined) {
      obj.extensionResponse = QualifiedExtensionResponse.toJSON(message.extensionResponse);
    }
    if (message.extensionEvent !== undefined) {
      obj.extensionEvent = QualifiedExtensionEvent.toJSON(message.extensionEvent);
    }
    if (message.managerRequest !== undefined) {
      obj.managerRequest = ManagerRequest.toJSON(message.managerRequest);
    }
    if (message.managerResponse !== undefined) {
      obj.managerResponse = ManagerResponse.toJSON(message.managerResponse);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IpcMessage>, I>>(base?: I): IpcMessage {
    return IpcMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IpcMessage>, I>>(object: I): IpcMessage {
    const message = createBaseIpcMessage();
    message.extensionRequest = (object.extensionRequest !== undefined && object.extensionRequest !== null)
      ? QualifiedExtensionRequest.fromPartial(object.extensionRequest)
      : undefined;
    message.extensionResponse = (object.extensionResponse !== undefined && object.extensionResponse !== null)
      ? QualifiedExtensionResponse.fromPartial(object.extensionResponse)
      : undefined;
    message.extensionEvent = (object.extensionEvent !== undefined && object.extensionEvent !== null)
      ? QualifiedExtensionEvent.fromPartial(object.extensionEvent)
      : undefined;
    message.managerRequest = (object.managerRequest !== undefined && object.managerRequest !== null)
      ? ManagerRequest.fromPartial(object.managerRequest)
      : undefined;
    message.managerResponse = (object.managerResponse !== undefined && object.managerResponse !== null)
      ? ManagerResponse.fromPartial(object.managerResponse)
      : undefined;
    return message;
  },
};

function createBaseManagerRequest(): ManagerRequest {
  return { requestId: "", payload: undefined };
}

export const ManagerRequest: MessageFns<ManagerRequest> = {
  encode(message: ManagerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.payload !== undefined) {
      RequestData.encode(message.payload, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = RequestData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagerRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      payload: isSet(object.payload) ? RequestData.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: ManagerRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.payload !== undefined) {
      obj.payload = RequestData.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerRequest>, I>>(base?: I): ManagerRequest {
    return ManagerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerRequest>, I>>(object: I): ManagerRequest {
    const message = createBaseManagerRequest();
    message.requestId = object.requestId ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? RequestData.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseManagerResponse(): ManagerResponse {
  return { requestId: "", value: undefined, error: undefined };
}

export const ManagerResponse: MessageFns<ManagerResponse> = {
  encode(message: ManagerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.value !== undefined) {
      ResponseData.encode(message.value, writer.uint32(18).fork()).join();
    }
    if (message.error !== undefined) {
      ErrorResponse.encode(message.error, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = ResponseData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = ErrorResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagerResponse {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      value: isSet(object.value) ? ResponseData.fromJSON(object.value) : undefined,
      error: isSet(object.error) ? ErrorResponse.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ManagerResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.value !== undefined) {
      obj.value = ResponseData.toJSON(message.value);
    }
    if (message.error !== undefined) {
      obj.error = ErrorResponse.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerResponse>, I>>(base?: I): ManagerResponse {
    return ManagerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerResponse>, I>>(object: I): ManagerResponse {
    const message = createBaseManagerResponse();
    message.requestId = object.requestId ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ResponseData.fromPartial(object.value)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? ErrorResponse.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseQualifiedExtensionRequest(): QualifiedExtensionRequest {
  return { sessionId: "", request: undefined };
}

export const QualifiedExtensionRequest: MessageFns<QualifiedExtensionRequest> = {
  encode(message: QualifiedExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.request !== undefined) {
      Request.encode(message.request, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QualifiedExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQualifiedExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.request = Request.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QualifiedExtensionRequest {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      request: isSet(object.request) ? Request.fromJSON(object.request) : undefined,
    };
  },

  toJSON(message: QualifiedExtensionRequest): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.request !== undefined) {
      obj.request = Request.toJSON(message.request);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QualifiedExtensionRequest>, I>>(base?: I): QualifiedExtensionRequest {
    return QualifiedExtensionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QualifiedExtensionRequest>, I>>(object: I): QualifiedExtensionRequest {
    const message = createBaseQualifiedExtensionRequest();
    message.sessionId = object.sessionId ?? "";
    message.request = (object.request !== undefined && object.request !== null)
      ? Request.fromPartial(object.request)
      : undefined;
    return message;
  },
};

function createBaseQualifiedExtensionResponse(): QualifiedExtensionResponse {
  return { sessionId: "", response: undefined };
}

export const QualifiedExtensionResponse: MessageFns<QualifiedExtensionResponse> = {
  encode(message: QualifiedExtensionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.response !== undefined) {
      Response.encode(message.response, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QualifiedExtensionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQualifiedExtensionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response = Response.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QualifiedExtensionResponse {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      response: isSet(object.response) ? Response.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: QualifiedExtensionResponse): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.response !== undefined) {
      obj.response = Response.toJSON(message.response);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QualifiedExtensionResponse>, I>>(base?: I): QualifiedExtensionResponse {
    return QualifiedExtensionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QualifiedExtensionResponse>, I>>(object: I): QualifiedExtensionResponse {
    const message = createBaseQualifiedExtensionResponse();
    message.sessionId = object.sessionId ?? "";
    message.response = (object.response !== undefined && object.response !== null)
      ? Response.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseQualifiedExtensionEvent(): QualifiedExtensionEvent {
  return { sessionId: "", event: undefined };
}

export const QualifiedExtensionEvent: MessageFns<QualifiedExtensionEvent> = {
  encode(message: QualifiedExtensionEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QualifiedExtensionEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQualifiedExtensionEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QualifiedExtensionEvent {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      event: isSet(object.event) ? Event.fromJSON(object.event) : undefined,
    };
  },

  toJSON(message: QualifiedExtensionEvent): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QualifiedExtensionEvent>, I>>(base?: I): QualifiedExtensionEvent {
    return QualifiedExtensionEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QualifiedExtensionEvent>, I>>(object: I): QualifiedExtensionEvent {
    const message = createBaseQualifiedExtensionEvent();
    message.sessionId = object.sessionId ?? "";
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    return message;
  },
};

function createBaseExtensionMessage(): ExtensionMessage {
  return { request: undefined, response: undefined, event: undefined };
}

export const ExtensionMessage: MessageFns<ExtensionMessage> = {
  encode(message: ExtensionMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request !== undefined) {
      Request.encode(message.request, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      Response.encode(message.response, writer.uint32(18).fork()).join();
    }
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.request = Request.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response = Response.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionMessage {
    return {
      request: isSet(object.request) ? Request.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? Response.fromJSON(object.response) : undefined,
      event: isSet(object.event) ? Event.fromJSON(object.event) : undefined,
    };
  },

  toJSON(message: ExtensionMessage): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = Request.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = Response.toJSON(message.response);
    }
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionMessage>, I>>(base?: I): ExtensionMessage {
    return ExtensionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionMessage>, I>>(object: I): ExtensionMessage {
    const message = createBaseExtensionMessage();
    message.request = (object.request !== undefined && object.request !== null)
      ? Request.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? Response.fromPartial(object.response)
      : undefined;
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
