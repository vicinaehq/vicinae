// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: extension.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Request as Request2, Response as Response7 } from "./application";
import { Request as Request3, Response as Response8 } from "./clipboard";
import { ErrorResponse } from "./common";
import { Request as Request5, Response as Response10 } from "./oauth";
import { Request as Request4, Response as Response9 } from "./storage";
import { Request as Request1, Response as Response6 } from "./ui";

export const protobufPackage = "proto.ext.extension";

export interface Request {
  requestId: string;
  data: RequestData | undefined;
}

export interface RequestData {
  ui?: Request1 | undefined;
  app?: Request2 | undefined;
  clipboard?: Request3 | undefined;
  storage?: Request4 | undefined;
  oauth?: Request5 | undefined;
}

export interface Response {
  requestId: string;
  data?: ResponseData | undefined;
  error?: ErrorResponse | undefined;
}

export interface ResponseData {
  ui?: Response6 | undefined;
  app?: Response7 | undefined;
  clipboard?: Response8 | undefined;
  storage?: Response9 | undefined;
  oauth?: Response10 | undefined;
}

export interface Event {
  id: string;
  generic?: GenericEventData | undefined;
  crash?: CrashEventData | undefined;
}

export interface CrashEventData {
  text: string;
}

export interface GenericEventData {
  json: string;
}

function createBaseRequest(): Request {
  return { requestId: "", data: undefined };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.data !== undefined) {
      RequestData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = RequestData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      data: isSet(object.data) ? RequestData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.data !== undefined) {
      obj.data = RequestData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.requestId = object.requestId ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? RequestData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRequestData(): RequestData {
  return { ui: undefined, app: undefined, clipboard: undefined, storage: undefined, oauth: undefined };
}

export const RequestData: MessageFns<RequestData> = {
  encode(message: RequestData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ui !== undefined) {
      Request1.encode(message.ui, writer.uint32(10).fork()).join();
    }
    if (message.app !== undefined) {
      Request2.encode(message.app, writer.uint32(18).fork()).join();
    }
    if (message.clipboard !== undefined) {
      Request3.encode(message.clipboard, writer.uint32(26).fork()).join();
    }
    if (message.storage !== undefined) {
      Request4.encode(message.storage, writer.uint32(34).fork()).join();
    }
    if (message.oauth !== undefined) {
      Request5.encode(message.oauth, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ui = Request1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.app = Request2.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clipboard = Request3.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.storage = Request4.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.oauth = Request5.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestData {
    return {
      ui: isSet(object.ui) ? Request1.fromJSON(object.ui) : undefined,
      app: isSet(object.app) ? Request2.fromJSON(object.app) : undefined,
      clipboard: isSet(object.clipboard) ? Request3.fromJSON(object.clipboard) : undefined,
      storage: isSet(object.storage) ? Request4.fromJSON(object.storage) : undefined,
      oauth: isSet(object.oauth) ? Request5.fromJSON(object.oauth) : undefined,
    };
  },

  toJSON(message: RequestData): unknown {
    const obj: any = {};
    if (message.ui !== undefined) {
      obj.ui = Request1.toJSON(message.ui);
    }
    if (message.app !== undefined) {
      obj.app = Request2.toJSON(message.app);
    }
    if (message.clipboard !== undefined) {
      obj.clipboard = Request3.toJSON(message.clipboard);
    }
    if (message.storage !== undefined) {
      obj.storage = Request4.toJSON(message.storage);
    }
    if (message.oauth !== undefined) {
      obj.oauth = Request5.toJSON(message.oauth);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestData>, I>>(base?: I): RequestData {
    return RequestData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestData>, I>>(object: I): RequestData {
    const message = createBaseRequestData();
    message.ui = (object.ui !== undefined && object.ui !== null) ? Request1.fromPartial(object.ui) : undefined;
    message.app = (object.app !== undefined && object.app !== null) ? Request2.fromPartial(object.app) : undefined;
    message.clipboard = (object.clipboard !== undefined && object.clipboard !== null)
      ? Request3.fromPartial(object.clipboard)
      : undefined;
    message.storage = (object.storage !== undefined && object.storage !== null)
      ? Request4.fromPartial(object.storage)
      : undefined;
    message.oauth = (object.oauth !== undefined && object.oauth !== null)
      ? Request5.fromPartial(object.oauth)
      : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return { requestId: "", data: undefined, error: undefined };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.data !== undefined) {
      ResponseData.encode(message.data, writer.uint32(18).fork()).join();
    }
    if (message.error !== undefined) {
      ErrorResponse.encode(message.error, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ResponseData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = ErrorResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      data: isSet(object.data) ? ResponseData.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? ErrorResponse.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.data !== undefined) {
      obj.data = ResponseData.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = ErrorResponse.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.requestId = object.requestId ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ResponseData.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? ErrorResponse.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseResponseData(): ResponseData {
  return { ui: undefined, app: undefined, clipboard: undefined, storage: undefined, oauth: undefined };
}

export const ResponseData: MessageFns<ResponseData> = {
  encode(message: ResponseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ui !== undefined) {
      Response6.encode(message.ui, writer.uint32(10).fork()).join();
    }
    if (message.app !== undefined) {
      Response7.encode(message.app, writer.uint32(18).fork()).join();
    }
    if (message.clipboard !== undefined) {
      Response8.encode(message.clipboard, writer.uint32(26).fork()).join();
    }
    if (message.storage !== undefined) {
      Response9.encode(message.storage, writer.uint32(34).fork()).join();
    }
    if (message.oauth !== undefined) {
      Response10.encode(message.oauth, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ui = Response6.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.app = Response7.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clipboard = Response8.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.storage = Response9.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.oauth = Response10.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseData {
    return {
      ui: isSet(object.ui) ? Response6.fromJSON(object.ui) : undefined,
      app: isSet(object.app) ? Response7.fromJSON(object.app) : undefined,
      clipboard: isSet(object.clipboard) ? Response8.fromJSON(object.clipboard) : undefined,
      storage: isSet(object.storage) ? Response9.fromJSON(object.storage) : undefined,
      oauth: isSet(object.oauth) ? Response10.fromJSON(object.oauth) : undefined,
    };
  },

  toJSON(message: ResponseData): unknown {
    const obj: any = {};
    if (message.ui !== undefined) {
      obj.ui = Response6.toJSON(message.ui);
    }
    if (message.app !== undefined) {
      obj.app = Response7.toJSON(message.app);
    }
    if (message.clipboard !== undefined) {
      obj.clipboard = Response8.toJSON(message.clipboard);
    }
    if (message.storage !== undefined) {
      obj.storage = Response9.toJSON(message.storage);
    }
    if (message.oauth !== undefined) {
      obj.oauth = Response10.toJSON(message.oauth);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseData>, I>>(base?: I): ResponseData {
    return ResponseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseData>, I>>(object: I): ResponseData {
    const message = createBaseResponseData();
    message.ui = (object.ui !== undefined && object.ui !== null) ? Response6.fromPartial(object.ui) : undefined;
    message.app = (object.app !== undefined && object.app !== null) ? Response7.fromPartial(object.app) : undefined;
    message.clipboard = (object.clipboard !== undefined && object.clipboard !== null)
      ? Response8.fromPartial(object.clipboard)
      : undefined;
    message.storage = (object.storage !== undefined && object.storage !== null)
      ? Response9.fromPartial(object.storage)
      : undefined;
    message.oauth = (object.oauth !== undefined && object.oauth !== null)
      ? Response10.fromPartial(object.oauth)
      : undefined;
    return message;
  },
};

function createBaseEvent(): Event {
  return { id: "", generic: undefined, crash: undefined };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.generic !== undefined) {
      GenericEventData.encode(message.generic, writer.uint32(18).fork()).join();
    }
    if (message.crash !== undefined) {
      CrashEventData.encode(message.crash, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.generic = GenericEventData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.crash = CrashEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      generic: isSet(object.generic) ? GenericEventData.fromJSON(object.generic) : undefined,
      crash: isSet(object.crash) ? CrashEventData.fromJSON(object.crash) : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.generic !== undefined) {
      obj.generic = GenericEventData.toJSON(message.generic);
    }
    if (message.crash !== undefined) {
      obj.crash = CrashEventData.toJSON(message.crash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.id = object.id ?? "";
    message.generic = (object.generic !== undefined && object.generic !== null)
      ? GenericEventData.fromPartial(object.generic)
      : undefined;
    message.crash = (object.crash !== undefined && object.crash !== null)
      ? CrashEventData.fromPartial(object.crash)
      : undefined;
    return message;
  },
};

function createBaseCrashEventData(): CrashEventData {
  return { text: "" };
}

export const CrashEventData: MessageFns<CrashEventData> = {
  encode(message: CrashEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrashEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrashEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrashEventData {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: CrashEventData): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CrashEventData>, I>>(base?: I): CrashEventData {
    return CrashEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CrashEventData>, I>>(object: I): CrashEventData {
    const message = createBaseCrashEventData();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseGenericEventData(): GenericEventData {
  return { json: "" };
}

export const GenericEventData: MessageFns<GenericEventData> = {
  encode(message: GenericEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.json !== "") {
      writer.uint32(10).string(message.json);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenericEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenericEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.json = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenericEventData {
    return { json: isSet(object.json) ? globalThis.String(object.json) : "" };
  },

  toJSON(message: GenericEventData): unknown {
    const obj: any = {};
    if (message.json !== "") {
      obj.json = message.json;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenericEventData>, I>>(base?: I): GenericEventData {
    return GenericEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenericEventData>, I>>(object: I): GenericEventData {
    const message = createBaseGenericEventData();
    message.json = object.json ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
