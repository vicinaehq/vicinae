// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: ui.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AckResponse } from "./common";
import { Value } from "./google/protobuf/struct";

export const protobufPackage = "proto.ext.ui";

export enum ToastStyle {
  Success = 0,
  Info = 1,
  Warning = 2,
  Error = 3,
  Dynamic = 4,
  UNRECOGNIZED = -1,
}

export function toastStyleFromJSON(object: any): ToastStyle {
  switch (object) {
    case 0:
    case "Success":
      return ToastStyle.Success;
    case 1:
    case "Info":
      return ToastStyle.Info;
    case 2:
    case "Warning":
      return ToastStyle.Warning;
    case 3:
    case "Error":
      return ToastStyle.Error;
    case 4:
    case "Dynamic":
      return ToastStyle.Dynamic;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ToastStyle.UNRECOGNIZED;
  }
}

export function toastStyleToJSON(object: ToastStyle): string {
  switch (object) {
    case ToastStyle.Success:
      return "Success";
    case ToastStyle.Info:
      return "Info";
    case ToastStyle.Warning:
      return "Warning";
    case ToastStyle.Error:
      return "Error";
    case ToastStyle.Dynamic:
      return "Dynamic";
    case ToastStyle.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PopToRootType {
  PopToRootDefault = 0,
  PopToRootImmediate = 1,
  PopToRootSuspended = 2,
  UNRECOGNIZED = -1,
}

export function popToRootTypeFromJSON(object: any): PopToRootType {
  switch (object) {
    case 0:
    case "PopToRootDefault":
      return PopToRootType.PopToRootDefault;
    case 1:
    case "PopToRootImmediate":
      return PopToRootType.PopToRootImmediate;
    case 2:
    case "PopToRootSuspended":
      return PopToRootType.PopToRootSuspended;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PopToRootType.UNRECOGNIZED;
  }
}

export function popToRootTypeToJSON(object: PopToRootType): string {
  switch (object) {
    case PopToRootType.PopToRootDefault:
      return "PopToRootDefault";
    case PopToRootType.PopToRootImmediate:
      return "PopToRootImmediate";
    case PopToRootType.PopToRootSuspended:
      return "PopToRootSuspended";
    case PopToRootType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ConfirmAlertActionStyle {
  Default = 0,
  Destructive = 1,
  Cancel = 2,
  UNRECOGNIZED = -1,
}

export function confirmAlertActionStyleFromJSON(object: any): ConfirmAlertActionStyle {
  switch (object) {
    case 0:
    case "Default":
      return ConfirmAlertActionStyle.Default;
    case 1:
    case "Destructive":
      return ConfirmAlertActionStyle.Destructive;
    case 2:
    case "Cancel":
      return ConfirmAlertActionStyle.Cancel;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConfirmAlertActionStyle.UNRECOGNIZED;
  }
}

export function confirmAlertActionStyleToJSON(object: ConfirmAlertActionStyle): string {
  switch (object) {
    case ConfirmAlertActionStyle.Default:
      return "Default";
    case ConfirmAlertActionStyle.Destructive:
      return "Destructive";
    case ConfirmAlertActionStyle.Cancel:
      return "Cancel";
    case ConfirmAlertActionStyle.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ImageMask {
  None = 0,
  Circle = 1,
  RoundedRectangle = 2,
  UNRECOGNIZED = -1,
}

export function imageMaskFromJSON(object: any): ImageMask {
  switch (object) {
    case 0:
    case "None":
      return ImageMask.None;
    case 1:
    case "Circle":
      return ImageMask.Circle;
    case 2:
    case "RoundedRectangle":
      return ImageMask.RoundedRectangle;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ImageMask.UNRECOGNIZED;
  }
}

export function imageMaskToJSON(object: ImageMask): string {
  switch (object) {
    case ImageMask.None:
      return "None";
    case ImageMask.Circle:
      return "Circle";
    case ImageMask.RoundedRectangle:
      return "RoundedRectangle";
    case ImageMask.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ShowToastRequest {
  id: string;
  title: string;
  style: ToastStyle;
}

export interface HideToastRequest {
  id: string;
}

export interface UpdateToastRequest {
  id: string;
  title: string;
}

export interface PushViewRequest {
}

export interface PopViewRequest {
}

export interface CloseMainWindowRequest {
}

export interface ClearSearchBarRequest {
}

export interface SetSearchTextRequest {
  text: string;
}

export interface GetSelectedTextRequest {
}

export interface GetSelectedTextResponse {
  text: string;
}

export interface ShowHudRequest {
  text: string;
  clearRootSearch: boolean;
  popToRoot: PopToRootType;
}

export interface RenderRequest {
  /**
   * repeated RenderNode views = 1;
   * we will migrate to actual protobuf
   */
  json: string;
}

export interface ConfirmAlertRequest {
  title: string;
  description: string;
  /** TODO: replace with proper ImageLike message */
  icon?: string | undefined;
  dismissAction?: ConfirmAlertAction | undefined;
  primaryAction?: ConfirmAlertAction | undefined;
  rememberUserChoice: boolean;
  handle: string;
}

export interface ConfirmAlertAction {
  title: string;
  style: ConfirmAlertActionStyle;
}

export interface Request {
  render?: RenderRequest | undefined;
  showToast?: ShowToastRequest | undefined;
  hideToast?: HideToastRequest | undefined;
  updateToast?: UpdateToastRequest | undefined;
  pushView?: PushViewRequest | undefined;
  popView?: PopViewRequest | undefined;
  clearSearch?: ClearSearchBarRequest | undefined;
  closeMainWindow?: CloseMainWindowRequest | undefined;
  showHud?: ShowHudRequest | undefined;
  setSearchText?: SetSearchTextRequest | undefined;
  confirmAlert?: ConfirmAlertRequest | undefined;
  getSelectedText?: GetSelectedTextRequest | undefined;
}

export interface Response {
  render?: AckResponse | undefined;
  showToast?: AckResponse | undefined;
  hideToast?: AckResponse | undefined;
  updateToast?: AckResponse | undefined;
  pushView?: AckResponse | undefined;
  popView?: AckResponse | undefined;
  clearSearch?: AckResponse | undefined;
  closeMainWindow?: AckResponse | undefined;
  showHud?: AckResponse | undefined;
  setSearchText?: AckResponse | undefined;
  confirmAlert?: AckResponse | undefined;
  getSelectedText?: GetSelectedTextResponse | undefined;
}

export interface RenderNode {
  type: string;
  hasDirtyChild: boolean;
  hasDirtyProps: boolean;
  props: { [key: string]: any | undefined };
  children: RenderNode[];
}

export interface RenderNode_PropsEntry {
  key: string;
  value: any | undefined;
}

export interface ThemedImageSource {
  light: string;
  dark: string;
}

export interface ImageSource {
  raw?: string | undefined;
  themed?: ThemedImageSource | undefined;
}

export interface Image {
  source: ImageSource | undefined;
  fallback?: ImageSource | undefined;
  mask?: ImageMask | undefined;
  colorTint?: string | undefined;
}

function createBaseShowToastRequest(): ShowToastRequest {
  return { id: "", title: "", style: 0 };
}

export const ShowToastRequest: MessageFns<ShowToastRequest> = {
  encode(message: ShowToastRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.style !== 0) {
      writer.uint32(24).int32(message.style);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShowToastRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShowToastRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.style = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShowToastRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      style: isSet(object.style) ? toastStyleFromJSON(object.style) : 0,
    };
  },

  toJSON(message: ShowToastRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.style !== 0) {
      obj.style = toastStyleToJSON(message.style);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShowToastRequest>, I>>(base?: I): ShowToastRequest {
    return ShowToastRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShowToastRequest>, I>>(object: I): ShowToastRequest {
    const message = createBaseShowToastRequest();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.style = object.style ?? 0;
    return message;
  },
};

function createBaseHideToastRequest(): HideToastRequest {
  return { id: "" };
}

export const HideToastRequest: MessageFns<HideToastRequest> = {
  encode(message: HideToastRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HideToastRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHideToastRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HideToastRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: HideToastRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HideToastRequest>, I>>(base?: I): HideToastRequest {
    return HideToastRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HideToastRequest>, I>>(object: I): HideToastRequest {
    const message = createBaseHideToastRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateToastRequest(): UpdateToastRequest {
  return { id: "", title: "" };
}

export const UpdateToastRequest: MessageFns<UpdateToastRequest> = {
  encode(message: UpdateToastRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateToastRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateToastRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateToastRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
    };
  },

  toJSON(message: UpdateToastRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateToastRequest>, I>>(base?: I): UpdateToastRequest {
    return UpdateToastRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateToastRequest>, I>>(object: I): UpdateToastRequest {
    const message = createBaseUpdateToastRequest();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    return message;
  },
};

function createBasePushViewRequest(): PushViewRequest {
  return {};
}

export const PushViewRequest: MessageFns<PushViewRequest> = {
  encode(_: PushViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PushViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PushViewRequest {
    return {};
  },

  toJSON(_: PushViewRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PushViewRequest>, I>>(base?: I): PushViewRequest {
    return PushViewRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PushViewRequest>, I>>(_: I): PushViewRequest {
    const message = createBasePushViewRequest();
    return message;
  },
};

function createBasePopViewRequest(): PopViewRequest {
  return {};
}

export const PopViewRequest: MessageFns<PopViewRequest> = {
  encode(_: PopViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PopViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePopViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PopViewRequest {
    return {};
  },

  toJSON(_: PopViewRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PopViewRequest>, I>>(base?: I): PopViewRequest {
    return PopViewRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PopViewRequest>, I>>(_: I): PopViewRequest {
    const message = createBasePopViewRequest();
    return message;
  },
};

function createBaseCloseMainWindowRequest(): CloseMainWindowRequest {
  return {};
}

export const CloseMainWindowRequest: MessageFns<CloseMainWindowRequest> = {
  encode(_: CloseMainWindowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloseMainWindowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloseMainWindowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CloseMainWindowRequest {
    return {};
  },

  toJSON(_: CloseMainWindowRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CloseMainWindowRequest>, I>>(base?: I): CloseMainWindowRequest {
    return CloseMainWindowRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CloseMainWindowRequest>, I>>(_: I): CloseMainWindowRequest {
    const message = createBaseCloseMainWindowRequest();
    return message;
  },
};

function createBaseClearSearchBarRequest(): ClearSearchBarRequest {
  return {};
}

export const ClearSearchBarRequest: MessageFns<ClearSearchBarRequest> = {
  encode(_: ClearSearchBarRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearSearchBarRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearSearchBarRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClearSearchBarRequest {
    return {};
  },

  toJSON(_: ClearSearchBarRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearSearchBarRequest>, I>>(base?: I): ClearSearchBarRequest {
    return ClearSearchBarRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearSearchBarRequest>, I>>(_: I): ClearSearchBarRequest {
    const message = createBaseClearSearchBarRequest();
    return message;
  },
};

function createBaseSetSearchTextRequest(): SetSearchTextRequest {
  return { text: "" };
}

export const SetSearchTextRequest: MessageFns<SetSearchTextRequest> = {
  encode(message: SetSearchTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSearchTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSearchTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSearchTextRequest {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: SetSearchTextRequest): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSearchTextRequest>, I>>(base?: I): SetSearchTextRequest {
    return SetSearchTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSearchTextRequest>, I>>(object: I): SetSearchTextRequest {
    const message = createBaseSetSearchTextRequest();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseGetSelectedTextRequest(): GetSelectedTextRequest {
  return {};
}

export const GetSelectedTextRequest: MessageFns<GetSelectedTextRequest> = {
  encode(_: GetSelectedTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSelectedTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSelectedTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSelectedTextRequest {
    return {};
  },

  toJSON(_: GetSelectedTextRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSelectedTextRequest>, I>>(base?: I): GetSelectedTextRequest {
    return GetSelectedTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSelectedTextRequest>, I>>(_: I): GetSelectedTextRequest {
    const message = createBaseGetSelectedTextRequest();
    return message;
  },
};

function createBaseGetSelectedTextResponse(): GetSelectedTextResponse {
  return { text: "" };
}

export const GetSelectedTextResponse: MessageFns<GetSelectedTextResponse> = {
  encode(message: GetSelectedTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSelectedTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSelectedTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSelectedTextResponse {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: GetSelectedTextResponse): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSelectedTextResponse>, I>>(base?: I): GetSelectedTextResponse {
    return GetSelectedTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSelectedTextResponse>, I>>(object: I): GetSelectedTextResponse {
    const message = createBaseGetSelectedTextResponse();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseShowHudRequest(): ShowHudRequest {
  return { text: "", clearRootSearch: false, popToRoot: 0 };
}

export const ShowHudRequest: MessageFns<ShowHudRequest> = {
  encode(message: ShowHudRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.clearRootSearch !== false) {
      writer.uint32(16).bool(message.clearRootSearch);
    }
    if (message.popToRoot !== 0) {
      writer.uint32(24).int32(message.popToRoot);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShowHudRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShowHudRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.clearRootSearch = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.popToRoot = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShowHudRequest {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      clearRootSearch: isSet(object.clearRootSearch) ? globalThis.Boolean(object.clearRootSearch) : false,
      popToRoot: isSet(object.popToRoot) ? popToRootTypeFromJSON(object.popToRoot) : 0,
    };
  },

  toJSON(message: ShowHudRequest): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.clearRootSearch !== false) {
      obj.clearRootSearch = message.clearRootSearch;
    }
    if (message.popToRoot !== 0) {
      obj.popToRoot = popToRootTypeToJSON(message.popToRoot);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShowHudRequest>, I>>(base?: I): ShowHudRequest {
    return ShowHudRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShowHudRequest>, I>>(object: I): ShowHudRequest {
    const message = createBaseShowHudRequest();
    message.text = object.text ?? "";
    message.clearRootSearch = object.clearRootSearch ?? false;
    message.popToRoot = object.popToRoot ?? 0;
    return message;
  },
};

function createBaseRenderRequest(): RenderRequest {
  return { json: "" };
}

export const RenderRequest: MessageFns<RenderRequest> = {
  encode(message: RenderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.json !== "") {
      writer.uint32(10).string(message.json);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.json = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenderRequest {
    return { json: isSet(object.json) ? globalThis.String(object.json) : "" };
  },

  toJSON(message: RenderRequest): unknown {
    const obj: any = {};
    if (message.json !== "") {
      obj.json = message.json;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenderRequest>, I>>(base?: I): RenderRequest {
    return RenderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenderRequest>, I>>(object: I): RenderRequest {
    const message = createBaseRenderRequest();
    message.json = object.json ?? "";
    return message;
  },
};

function createBaseConfirmAlertRequest(): ConfirmAlertRequest {
  return {
    title: "",
    description: "",
    icon: undefined,
    dismissAction: undefined,
    primaryAction: undefined,
    rememberUserChoice: false,
    handle: "",
  };
}

export const ConfirmAlertRequest: MessageFns<ConfirmAlertRequest> = {
  encode(message: ConfirmAlertRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.icon !== undefined) {
      writer.uint32(26).string(message.icon);
    }
    if (message.dismissAction !== undefined) {
      ConfirmAlertAction.encode(message.dismissAction, writer.uint32(34).fork()).join();
    }
    if (message.primaryAction !== undefined) {
      ConfirmAlertAction.encode(message.primaryAction, writer.uint32(42).fork()).join();
    }
    if (message.rememberUserChoice !== false) {
      writer.uint32(48).bool(message.rememberUserChoice);
    }
    if (message.handle !== "") {
      writer.uint32(58).string(message.handle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfirmAlertRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfirmAlertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dismissAction = ConfirmAlertAction.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.primaryAction = ConfirmAlertAction.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.rememberUserChoice = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.handle = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfirmAlertRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : undefined,
      dismissAction: isSet(object.dismissAction) ? ConfirmAlertAction.fromJSON(object.dismissAction) : undefined,
      primaryAction: isSet(object.primaryAction) ? ConfirmAlertAction.fromJSON(object.primaryAction) : undefined,
      rememberUserChoice: isSet(object.rememberUserChoice) ? globalThis.Boolean(object.rememberUserChoice) : false,
      handle: isSet(object.handle) ? globalThis.String(object.handle) : "",
    };
  },

  toJSON(message: ConfirmAlertRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.icon !== undefined) {
      obj.icon = message.icon;
    }
    if (message.dismissAction !== undefined) {
      obj.dismissAction = ConfirmAlertAction.toJSON(message.dismissAction);
    }
    if (message.primaryAction !== undefined) {
      obj.primaryAction = ConfirmAlertAction.toJSON(message.primaryAction);
    }
    if (message.rememberUserChoice !== false) {
      obj.rememberUserChoice = message.rememberUserChoice;
    }
    if (message.handle !== "") {
      obj.handle = message.handle;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfirmAlertRequest>, I>>(base?: I): ConfirmAlertRequest {
    return ConfirmAlertRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfirmAlertRequest>, I>>(object: I): ConfirmAlertRequest {
    const message = createBaseConfirmAlertRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.icon = object.icon ?? undefined;
    message.dismissAction = (object.dismissAction !== undefined && object.dismissAction !== null)
      ? ConfirmAlertAction.fromPartial(object.dismissAction)
      : undefined;
    message.primaryAction = (object.primaryAction !== undefined && object.primaryAction !== null)
      ? ConfirmAlertAction.fromPartial(object.primaryAction)
      : undefined;
    message.rememberUserChoice = object.rememberUserChoice ?? false;
    message.handle = object.handle ?? "";
    return message;
  },
};

function createBaseConfirmAlertAction(): ConfirmAlertAction {
  return { title: "", style: 0 };
}

export const ConfirmAlertAction: MessageFns<ConfirmAlertAction> = {
  encode(message: ConfirmAlertAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.style !== 0) {
      writer.uint32(16).int32(message.style);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfirmAlertAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfirmAlertAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.style = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfirmAlertAction {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      style: isSet(object.style) ? confirmAlertActionStyleFromJSON(object.style) : 0,
    };
  },

  toJSON(message: ConfirmAlertAction): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.style !== 0) {
      obj.style = confirmAlertActionStyleToJSON(message.style);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfirmAlertAction>, I>>(base?: I): ConfirmAlertAction {
    return ConfirmAlertAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfirmAlertAction>, I>>(object: I): ConfirmAlertAction {
    const message = createBaseConfirmAlertAction();
    message.title = object.title ?? "";
    message.style = object.style ?? 0;
    return message;
  },
};

function createBaseRequest(): Request {
  return {
    render: undefined,
    showToast: undefined,
    hideToast: undefined,
    updateToast: undefined,
    pushView: undefined,
    popView: undefined,
    clearSearch: undefined,
    closeMainWindow: undefined,
    showHud: undefined,
    setSearchText: undefined,
    confirmAlert: undefined,
    getSelectedText: undefined,
  };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.render !== undefined) {
      RenderRequest.encode(message.render, writer.uint32(10).fork()).join();
    }
    if (message.showToast !== undefined) {
      ShowToastRequest.encode(message.showToast, writer.uint32(18).fork()).join();
    }
    if (message.hideToast !== undefined) {
      HideToastRequest.encode(message.hideToast, writer.uint32(26).fork()).join();
    }
    if (message.updateToast !== undefined) {
      UpdateToastRequest.encode(message.updateToast, writer.uint32(34).fork()).join();
    }
    if (message.pushView !== undefined) {
      PushViewRequest.encode(message.pushView, writer.uint32(42).fork()).join();
    }
    if (message.popView !== undefined) {
      PopViewRequest.encode(message.popView, writer.uint32(50).fork()).join();
    }
    if (message.clearSearch !== undefined) {
      ClearSearchBarRequest.encode(message.clearSearch, writer.uint32(58).fork()).join();
    }
    if (message.closeMainWindow !== undefined) {
      CloseMainWindowRequest.encode(message.closeMainWindow, writer.uint32(66).fork()).join();
    }
    if (message.showHud !== undefined) {
      ShowHudRequest.encode(message.showHud, writer.uint32(74).fork()).join();
    }
    if (message.setSearchText !== undefined) {
      SetSearchTextRequest.encode(message.setSearchText, writer.uint32(82).fork()).join();
    }
    if (message.confirmAlert !== undefined) {
      ConfirmAlertRequest.encode(message.confirmAlert, writer.uint32(90).fork()).join();
    }
    if (message.getSelectedText !== undefined) {
      GetSelectedTextRequest.encode(message.getSelectedText, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.render = RenderRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.showToast = ShowToastRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.hideToast = HideToastRequest.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updateToast = UpdateToastRequest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pushView = PushViewRequest.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.popView = PopViewRequest.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.clearSearch = ClearSearchBarRequest.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.closeMainWindow = CloseMainWindowRequest.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.showHud = ShowHudRequest.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.setSearchText = SetSearchTextRequest.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.confirmAlert = ConfirmAlertRequest.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.getSelectedText = GetSelectedTextRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      render: isSet(object.render) ? RenderRequest.fromJSON(object.render) : undefined,
      showToast: isSet(object.showToast) ? ShowToastRequest.fromJSON(object.showToast) : undefined,
      hideToast: isSet(object.hideToast) ? HideToastRequest.fromJSON(object.hideToast) : undefined,
      updateToast: isSet(object.updateToast) ? UpdateToastRequest.fromJSON(object.updateToast) : undefined,
      pushView: isSet(object.pushView) ? PushViewRequest.fromJSON(object.pushView) : undefined,
      popView: isSet(object.popView) ? PopViewRequest.fromJSON(object.popView) : undefined,
      clearSearch: isSet(object.clearSearch) ? ClearSearchBarRequest.fromJSON(object.clearSearch) : undefined,
      closeMainWindow: isSet(object.closeMainWindow)
        ? CloseMainWindowRequest.fromJSON(object.closeMainWindow)
        : undefined,
      showHud: isSet(object.showHud) ? ShowHudRequest.fromJSON(object.showHud) : undefined,
      setSearchText: isSet(object.setSearchText) ? SetSearchTextRequest.fromJSON(object.setSearchText) : undefined,
      confirmAlert: isSet(object.confirmAlert) ? ConfirmAlertRequest.fromJSON(object.confirmAlert) : undefined,
      getSelectedText: isSet(object.getSelectedText)
        ? GetSelectedTextRequest.fromJSON(object.getSelectedText)
        : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.render !== undefined) {
      obj.render = RenderRequest.toJSON(message.render);
    }
    if (message.showToast !== undefined) {
      obj.showToast = ShowToastRequest.toJSON(message.showToast);
    }
    if (message.hideToast !== undefined) {
      obj.hideToast = HideToastRequest.toJSON(message.hideToast);
    }
    if (message.updateToast !== undefined) {
      obj.updateToast = UpdateToastRequest.toJSON(message.updateToast);
    }
    if (message.pushView !== undefined) {
      obj.pushView = PushViewRequest.toJSON(message.pushView);
    }
    if (message.popView !== undefined) {
      obj.popView = PopViewRequest.toJSON(message.popView);
    }
    if (message.clearSearch !== undefined) {
      obj.clearSearch = ClearSearchBarRequest.toJSON(message.clearSearch);
    }
    if (message.closeMainWindow !== undefined) {
      obj.closeMainWindow = CloseMainWindowRequest.toJSON(message.closeMainWindow);
    }
    if (message.showHud !== undefined) {
      obj.showHud = ShowHudRequest.toJSON(message.showHud);
    }
    if (message.setSearchText !== undefined) {
      obj.setSearchText = SetSearchTextRequest.toJSON(message.setSearchText);
    }
    if (message.confirmAlert !== undefined) {
      obj.confirmAlert = ConfirmAlertRequest.toJSON(message.confirmAlert);
    }
    if (message.getSelectedText !== undefined) {
      obj.getSelectedText = GetSelectedTextRequest.toJSON(message.getSelectedText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.render = (object.render !== undefined && object.render !== null)
      ? RenderRequest.fromPartial(object.render)
      : undefined;
    message.showToast = (object.showToast !== undefined && object.showToast !== null)
      ? ShowToastRequest.fromPartial(object.showToast)
      : undefined;
    message.hideToast = (object.hideToast !== undefined && object.hideToast !== null)
      ? HideToastRequest.fromPartial(object.hideToast)
      : undefined;
    message.updateToast = (object.updateToast !== undefined && object.updateToast !== null)
      ? UpdateToastRequest.fromPartial(object.updateToast)
      : undefined;
    message.pushView = (object.pushView !== undefined && object.pushView !== null)
      ? PushViewRequest.fromPartial(object.pushView)
      : undefined;
    message.popView = (object.popView !== undefined && object.popView !== null)
      ? PopViewRequest.fromPartial(object.popView)
      : undefined;
    message.clearSearch = (object.clearSearch !== undefined && object.clearSearch !== null)
      ? ClearSearchBarRequest.fromPartial(object.clearSearch)
      : undefined;
    message.closeMainWindow = (object.closeMainWindow !== undefined && object.closeMainWindow !== null)
      ? CloseMainWindowRequest.fromPartial(object.closeMainWindow)
      : undefined;
    message.showHud = (object.showHud !== undefined && object.showHud !== null)
      ? ShowHudRequest.fromPartial(object.showHud)
      : undefined;
    message.setSearchText = (object.setSearchText !== undefined && object.setSearchText !== null)
      ? SetSearchTextRequest.fromPartial(object.setSearchText)
      : undefined;
    message.confirmAlert = (object.confirmAlert !== undefined && object.confirmAlert !== null)
      ? ConfirmAlertRequest.fromPartial(object.confirmAlert)
      : undefined;
    message.getSelectedText = (object.getSelectedText !== undefined && object.getSelectedText !== null)
      ? GetSelectedTextRequest.fromPartial(object.getSelectedText)
      : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return {
    render: undefined,
    showToast: undefined,
    hideToast: undefined,
    updateToast: undefined,
    pushView: undefined,
    popView: undefined,
    clearSearch: undefined,
    closeMainWindow: undefined,
    showHud: undefined,
    setSearchText: undefined,
    confirmAlert: undefined,
    getSelectedText: undefined,
  };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.render !== undefined) {
      AckResponse.encode(message.render, writer.uint32(10).fork()).join();
    }
    if (message.showToast !== undefined) {
      AckResponse.encode(message.showToast, writer.uint32(18).fork()).join();
    }
    if (message.hideToast !== undefined) {
      AckResponse.encode(message.hideToast, writer.uint32(26).fork()).join();
    }
    if (message.updateToast !== undefined) {
      AckResponse.encode(message.updateToast, writer.uint32(34).fork()).join();
    }
    if (message.pushView !== undefined) {
      AckResponse.encode(message.pushView, writer.uint32(42).fork()).join();
    }
    if (message.popView !== undefined) {
      AckResponse.encode(message.popView, writer.uint32(50).fork()).join();
    }
    if (message.clearSearch !== undefined) {
      AckResponse.encode(message.clearSearch, writer.uint32(58).fork()).join();
    }
    if (message.closeMainWindow !== undefined) {
      AckResponse.encode(message.closeMainWindow, writer.uint32(66).fork()).join();
    }
    if (message.showHud !== undefined) {
      AckResponse.encode(message.showHud, writer.uint32(74).fork()).join();
    }
    if (message.setSearchText !== undefined) {
      AckResponse.encode(message.setSearchText, writer.uint32(82).fork()).join();
    }
    if (message.confirmAlert !== undefined) {
      AckResponse.encode(message.confirmAlert, writer.uint32(90).fork()).join();
    }
    if (message.getSelectedText !== undefined) {
      GetSelectedTextResponse.encode(message.getSelectedText, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.render = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.showToast = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.hideToast = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updateToast = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pushView = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.popView = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.clearSearch = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.closeMainWindow = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.showHud = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.setSearchText = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.confirmAlert = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.getSelectedText = GetSelectedTextResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      render: isSet(object.render) ? AckResponse.fromJSON(object.render) : undefined,
      showToast: isSet(object.showToast) ? AckResponse.fromJSON(object.showToast) : undefined,
      hideToast: isSet(object.hideToast) ? AckResponse.fromJSON(object.hideToast) : undefined,
      updateToast: isSet(object.updateToast) ? AckResponse.fromJSON(object.updateToast) : undefined,
      pushView: isSet(object.pushView) ? AckResponse.fromJSON(object.pushView) : undefined,
      popView: isSet(object.popView) ? AckResponse.fromJSON(object.popView) : undefined,
      clearSearch: isSet(object.clearSearch) ? AckResponse.fromJSON(object.clearSearch) : undefined,
      closeMainWindow: isSet(object.closeMainWindow) ? AckResponse.fromJSON(object.closeMainWindow) : undefined,
      showHud: isSet(object.showHud) ? AckResponse.fromJSON(object.showHud) : undefined,
      setSearchText: isSet(object.setSearchText) ? AckResponse.fromJSON(object.setSearchText) : undefined,
      confirmAlert: isSet(object.confirmAlert) ? AckResponse.fromJSON(object.confirmAlert) : undefined,
      getSelectedText: isSet(object.getSelectedText)
        ? GetSelectedTextResponse.fromJSON(object.getSelectedText)
        : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.render !== undefined) {
      obj.render = AckResponse.toJSON(message.render);
    }
    if (message.showToast !== undefined) {
      obj.showToast = AckResponse.toJSON(message.showToast);
    }
    if (message.hideToast !== undefined) {
      obj.hideToast = AckResponse.toJSON(message.hideToast);
    }
    if (message.updateToast !== undefined) {
      obj.updateToast = AckResponse.toJSON(message.updateToast);
    }
    if (message.pushView !== undefined) {
      obj.pushView = AckResponse.toJSON(message.pushView);
    }
    if (message.popView !== undefined) {
      obj.popView = AckResponse.toJSON(message.popView);
    }
    if (message.clearSearch !== undefined) {
      obj.clearSearch = AckResponse.toJSON(message.clearSearch);
    }
    if (message.closeMainWindow !== undefined) {
      obj.closeMainWindow = AckResponse.toJSON(message.closeMainWindow);
    }
    if (message.showHud !== undefined) {
      obj.showHud = AckResponse.toJSON(message.showHud);
    }
    if (message.setSearchText !== undefined) {
      obj.setSearchText = AckResponse.toJSON(message.setSearchText);
    }
    if (message.confirmAlert !== undefined) {
      obj.confirmAlert = AckResponse.toJSON(message.confirmAlert);
    }
    if (message.getSelectedText !== undefined) {
      obj.getSelectedText = GetSelectedTextResponse.toJSON(message.getSelectedText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.render = (object.render !== undefined && object.render !== null)
      ? AckResponse.fromPartial(object.render)
      : undefined;
    message.showToast = (object.showToast !== undefined && object.showToast !== null)
      ? AckResponse.fromPartial(object.showToast)
      : undefined;
    message.hideToast = (object.hideToast !== undefined && object.hideToast !== null)
      ? AckResponse.fromPartial(object.hideToast)
      : undefined;
    message.updateToast = (object.updateToast !== undefined && object.updateToast !== null)
      ? AckResponse.fromPartial(object.updateToast)
      : undefined;
    message.pushView = (object.pushView !== undefined && object.pushView !== null)
      ? AckResponse.fromPartial(object.pushView)
      : undefined;
    message.popView = (object.popView !== undefined && object.popView !== null)
      ? AckResponse.fromPartial(object.popView)
      : undefined;
    message.clearSearch = (object.clearSearch !== undefined && object.clearSearch !== null)
      ? AckResponse.fromPartial(object.clearSearch)
      : undefined;
    message.closeMainWindow = (object.closeMainWindow !== undefined && object.closeMainWindow !== null)
      ? AckResponse.fromPartial(object.closeMainWindow)
      : undefined;
    message.showHud = (object.showHud !== undefined && object.showHud !== null)
      ? AckResponse.fromPartial(object.showHud)
      : undefined;
    message.setSearchText = (object.setSearchText !== undefined && object.setSearchText !== null)
      ? AckResponse.fromPartial(object.setSearchText)
      : undefined;
    message.confirmAlert = (object.confirmAlert !== undefined && object.confirmAlert !== null)
      ? AckResponse.fromPartial(object.confirmAlert)
      : undefined;
    message.getSelectedText = (object.getSelectedText !== undefined && object.getSelectedText !== null)
      ? GetSelectedTextResponse.fromPartial(object.getSelectedText)
      : undefined;
    return message;
  },
};

function createBaseRenderNode(): RenderNode {
  return { type: "", hasDirtyChild: false, hasDirtyProps: false, props: {}, children: [] };
}

export const RenderNode: MessageFns<RenderNode> = {
  encode(message: RenderNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.hasDirtyChild !== false) {
      writer.uint32(16).bool(message.hasDirtyChild);
    }
    if (message.hasDirtyProps !== false) {
      writer.uint32(24).bool(message.hasDirtyProps);
    }
    Object.entries(message.props).forEach(([key, value]) => {
      if (value !== undefined) {
        RenderNode_PropsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
      }
    });
    for (const v of message.children) {
      RenderNode.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenderNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenderNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.hasDirtyChild = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasDirtyProps = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = RenderNode_PropsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.props[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.children.push(RenderNode.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenderNode {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      hasDirtyChild: isSet(object.hasDirtyChild) ? globalThis.Boolean(object.hasDirtyChild) : false,
      hasDirtyProps: isSet(object.hasDirtyProps) ? globalThis.Boolean(object.hasDirtyProps) : false,
      props: isObject(object.props)
        ? Object.entries(object.props).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      children: globalThis.Array.isArray(object?.children)
        ? object.children.map((e: any) => RenderNode.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RenderNode): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.hasDirtyChild !== false) {
      obj.hasDirtyChild = message.hasDirtyChild;
    }
    if (message.hasDirtyProps !== false) {
      obj.hasDirtyProps = message.hasDirtyProps;
    }
    if (message.props) {
      const entries = Object.entries(message.props);
      if (entries.length > 0) {
        obj.props = {};
        entries.forEach(([k, v]) => {
          obj.props[k] = v;
        });
      }
    }
    if (message.children?.length) {
      obj.children = message.children.map((e) => RenderNode.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenderNode>, I>>(base?: I): RenderNode {
    return RenderNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenderNode>, I>>(object: I): RenderNode {
    const message = createBaseRenderNode();
    message.type = object.type ?? "";
    message.hasDirtyChild = object.hasDirtyChild ?? false;
    message.hasDirtyProps = object.hasDirtyProps ?? false;
    message.props = Object.entries(object.props ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.children = object.children?.map((e) => RenderNode.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRenderNode_PropsEntry(): RenderNode_PropsEntry {
  return { key: "", value: undefined };
}

export const RenderNode_PropsEntry: MessageFns<RenderNode_PropsEntry> = {
  encode(message: RenderNode_PropsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenderNode_PropsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenderNode_PropsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenderNode_PropsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: RenderNode_PropsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenderNode_PropsEntry>, I>>(base?: I): RenderNode_PropsEntry {
    return RenderNode_PropsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenderNode_PropsEntry>, I>>(object: I): RenderNode_PropsEntry {
    const message = createBaseRenderNode_PropsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseThemedImageSource(): ThemedImageSource {
  return { light: "", dark: "" };
}

export const ThemedImageSource: MessageFns<ThemedImageSource> = {
  encode(message: ThemedImageSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.light !== "") {
      writer.uint32(10).string(message.light);
    }
    if (message.dark !== "") {
      writer.uint32(18).string(message.dark);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ThemedImageSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThemedImageSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.light = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dark = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ThemedImageSource {
    return {
      light: isSet(object.light) ? globalThis.String(object.light) : "",
      dark: isSet(object.dark) ? globalThis.String(object.dark) : "",
    };
  },

  toJSON(message: ThemedImageSource): unknown {
    const obj: any = {};
    if (message.light !== "") {
      obj.light = message.light;
    }
    if (message.dark !== "") {
      obj.dark = message.dark;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ThemedImageSource>, I>>(base?: I): ThemedImageSource {
    return ThemedImageSource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ThemedImageSource>, I>>(object: I): ThemedImageSource {
    const message = createBaseThemedImageSource();
    message.light = object.light ?? "";
    message.dark = object.dark ?? "";
    return message;
  },
};

function createBaseImageSource(): ImageSource {
  return { raw: undefined, themed: undefined };
}

export const ImageSource: MessageFns<ImageSource> = {
  encode(message: ImageSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.raw !== undefined) {
      writer.uint32(10).string(message.raw);
    }
    if (message.themed !== undefined) {
      ThemedImageSource.encode(message.themed, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.raw = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.themed = ThemedImageSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageSource {
    return {
      raw: isSet(object.raw) ? globalThis.String(object.raw) : undefined,
      themed: isSet(object.themed) ? ThemedImageSource.fromJSON(object.themed) : undefined,
    };
  },

  toJSON(message: ImageSource): unknown {
    const obj: any = {};
    if (message.raw !== undefined) {
      obj.raw = message.raw;
    }
    if (message.themed !== undefined) {
      obj.themed = ThemedImageSource.toJSON(message.themed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageSource>, I>>(base?: I): ImageSource {
    return ImageSource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageSource>, I>>(object: I): ImageSource {
    const message = createBaseImageSource();
    message.raw = object.raw ?? undefined;
    message.themed = (object.themed !== undefined && object.themed !== null)
      ? ThemedImageSource.fromPartial(object.themed)
      : undefined;
    return message;
  },
};

function createBaseImage(): Image {
  return { source: undefined, fallback: undefined, mask: undefined, colorTint: undefined };
}

export const Image: MessageFns<Image> = {
  encode(message: Image, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== undefined) {
      ImageSource.encode(message.source, writer.uint32(10).fork()).join();
    }
    if (message.fallback !== undefined) {
      ImageSource.encode(message.fallback, writer.uint32(18).fork()).join();
    }
    if (message.mask !== undefined) {
      writer.uint32(24).int32(message.mask);
    }
    if (message.colorTint !== undefined) {
      writer.uint32(34).string(message.colorTint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Image {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.source = ImageSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fallback = ImageSource.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.mask = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.colorTint = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Image {
    return {
      source: isSet(object.source) ? ImageSource.fromJSON(object.source) : undefined,
      fallback: isSet(object.fallback) ? ImageSource.fromJSON(object.fallback) : undefined,
      mask: isSet(object.mask) ? imageMaskFromJSON(object.mask) : undefined,
      colorTint: isSet(object.colorTint) ? globalThis.String(object.colorTint) : undefined,
    };
  },

  toJSON(message: Image): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = ImageSource.toJSON(message.source);
    }
    if (message.fallback !== undefined) {
      obj.fallback = ImageSource.toJSON(message.fallback);
    }
    if (message.mask !== undefined) {
      obj.mask = imageMaskToJSON(message.mask);
    }
    if (message.colorTint !== undefined) {
      obj.colorTint = message.colorTint;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Image>, I>>(base?: I): Image {
    return Image.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Image>, I>>(object: I): Image {
    const message = createBaseImage();
    message.source = (object.source !== undefined && object.source !== null)
      ? ImageSource.fromPartial(object.source)
      : undefined;
    message.fallback = (object.fallback !== undefined && object.fallback !== null)
      ? ImageSource.fromPartial(object.fallback)
      : undefined;
    message.mask = object.mask ?? undefined;
    message.colorTint = object.colorTint ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
