// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: manager.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AckResponse } from "./common";
import { Value } from "./google/protobuf/struct";

export const protobufPackage = "proto.ext.manager";

export enum CommandMode {
  View = 0,
  NoView = 1,
  UNRECOGNIZED = -1,
}

export function commandModeFromJSON(object: any): CommandMode {
  switch (object) {
    case 0:
    case "View":
      return CommandMode.View;
    case 1:
    case "NoView":
      return CommandMode.NoView;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CommandMode.UNRECOGNIZED;
  }
}

export function commandModeToJSON(object: CommandMode): string {
  switch (object) {
    case CommandMode.View:
      return "View";
    case CommandMode.NoView:
      return "NoView";
    case CommandMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CommandEnv {
  Development = 0,
  Production = 1,
  UNRECOGNIZED = -1,
}

export function commandEnvFromJSON(object: any): CommandEnv {
  switch (object) {
    case 0:
    case "Development":
      return CommandEnv.Development;
    case 1:
    case "Production":
      return CommandEnv.Production;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CommandEnv.UNRECOGNIZED;
  }
}

export function commandEnvToJSON(object: CommandEnv): string {
  switch (object) {
    case CommandEnv.Development:
      return "Development";
    case CommandEnv.Production:
      return "Production";
    case CommandEnv.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface RequestData {
  ping?: ManagerPingRequestData | undefined;
  load?: ManagerLoadCommand | undefined;
  unload?: ManagerUnloadCommand | undefined;
}

export interface ManagerPingRequestData {
}

export interface ResponseData {
  ack?: AckResponse | undefined;
  load?: ManagerLoadResponseData | undefined;
}

export interface ManagerLoadCommand {
  mode: CommandMode;
  env: CommandEnv;
  extensionPath: string;
  /** javascript source file to execute */
  entrypoint: string;
  preferenceValues: { [key: string]: any | undefined };
  argumentValues: { [key: string]: any | undefined };
}

export interface ManagerLoadCommand_PreferenceValuesEntry {
  key: string;
  value: any | undefined;
}

export interface ManagerLoadCommand_ArgumentValuesEntry {
  key: string;
  value: any | undefined;
}

export interface ManagerUnloadCommand {
  sessionId: string;
}

export interface ManagerLoadResponseData {
  sessionId: string;
}

function createBaseRequestData(): RequestData {
  return { ping: undefined, load: undefined, unload: undefined };
}

export const RequestData: MessageFns<RequestData> = {
  encode(message: RequestData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ping !== undefined) {
      ManagerPingRequestData.encode(message.ping, writer.uint32(10).fork()).join();
    }
    if (message.load !== undefined) {
      ManagerLoadCommand.encode(message.load, writer.uint32(18).fork()).join();
    }
    if (message.unload !== undefined) {
      ManagerUnloadCommand.encode(message.unload, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ping = ManagerPingRequestData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.load = ManagerLoadCommand.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.unload = ManagerUnloadCommand.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestData {
    return {
      ping: isSet(object.ping) ? ManagerPingRequestData.fromJSON(object.ping) : undefined,
      load: isSet(object.load) ? ManagerLoadCommand.fromJSON(object.load) : undefined,
      unload: isSet(object.unload) ? ManagerUnloadCommand.fromJSON(object.unload) : undefined,
    };
  },

  toJSON(message: RequestData): unknown {
    const obj: any = {};
    if (message.ping !== undefined) {
      obj.ping = ManagerPingRequestData.toJSON(message.ping);
    }
    if (message.load !== undefined) {
      obj.load = ManagerLoadCommand.toJSON(message.load);
    }
    if (message.unload !== undefined) {
      obj.unload = ManagerUnloadCommand.toJSON(message.unload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestData>, I>>(base?: I): RequestData {
    return RequestData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestData>, I>>(object: I): RequestData {
    const message = createBaseRequestData();
    message.ping = (object.ping !== undefined && object.ping !== null)
      ? ManagerPingRequestData.fromPartial(object.ping)
      : undefined;
    message.load = (object.load !== undefined && object.load !== null)
      ? ManagerLoadCommand.fromPartial(object.load)
      : undefined;
    message.unload = (object.unload !== undefined && object.unload !== null)
      ? ManagerUnloadCommand.fromPartial(object.unload)
      : undefined;
    return message;
  },
};

function createBaseManagerPingRequestData(): ManagerPingRequestData {
  return {};
}

export const ManagerPingRequestData: MessageFns<ManagerPingRequestData> = {
  encode(_: ManagerPingRequestData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerPingRequestData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerPingRequestData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ManagerPingRequestData {
    return {};
  },

  toJSON(_: ManagerPingRequestData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerPingRequestData>, I>>(base?: I): ManagerPingRequestData {
    return ManagerPingRequestData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerPingRequestData>, I>>(_: I): ManagerPingRequestData {
    const message = createBaseManagerPingRequestData();
    return message;
  },
};

function createBaseResponseData(): ResponseData {
  return { ack: undefined, load: undefined };
}

export const ResponseData: MessageFns<ResponseData> = {
  encode(message: ResponseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ack !== undefined) {
      AckResponse.encode(message.ack, writer.uint32(10).fork()).join();
    }
    if (message.load !== undefined) {
      ManagerLoadResponseData.encode(message.load, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ack = AckResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.load = ManagerLoadResponseData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseData {
    return {
      ack: isSet(object.ack) ? AckResponse.fromJSON(object.ack) : undefined,
      load: isSet(object.load) ? ManagerLoadResponseData.fromJSON(object.load) : undefined,
    };
  },

  toJSON(message: ResponseData): unknown {
    const obj: any = {};
    if (message.ack !== undefined) {
      obj.ack = AckResponse.toJSON(message.ack);
    }
    if (message.load !== undefined) {
      obj.load = ManagerLoadResponseData.toJSON(message.load);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseData>, I>>(base?: I): ResponseData {
    return ResponseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseData>, I>>(object: I): ResponseData {
    const message = createBaseResponseData();
    message.ack = (object.ack !== undefined && object.ack !== null) ? AckResponse.fromPartial(object.ack) : undefined;
    message.load = (object.load !== undefined && object.load !== null)
      ? ManagerLoadResponseData.fromPartial(object.load)
      : undefined;
    return message;
  },
};

function createBaseManagerLoadCommand(): ManagerLoadCommand {
  return { mode: 0, env: 0, extensionPath: "", entrypoint: "", preferenceValues: {}, argumentValues: {} };
}

export const ManagerLoadCommand: MessageFns<ManagerLoadCommand> = {
  encode(message: ManagerLoadCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mode !== 0) {
      writer.uint32(8).int32(message.mode);
    }
    if (message.env !== 0) {
      writer.uint32(16).int32(message.env);
    }
    if (message.extensionPath !== "") {
      writer.uint32(26).string(message.extensionPath);
    }
    if (message.entrypoint !== "") {
      writer.uint32(34).string(message.entrypoint);
    }
    Object.entries(message.preferenceValues).forEach(([key, value]) => {
      if (value !== undefined) {
        ManagerLoadCommand_PreferenceValuesEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
      }
    });
    Object.entries(message.argumentValues).forEach(([key, value]) => {
      if (value !== undefined) {
        ManagerLoadCommand_ArgumentValuesEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerLoadCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerLoadCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.env = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.extensionPath = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.entrypoint = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = ManagerLoadCommand_PreferenceValuesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.preferenceValues[entry5.key] = entry5.value;
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = ManagerLoadCommand_ArgumentValuesEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.argumentValues[entry6.key] = entry6.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagerLoadCommand {
    return {
      mode: isSet(object.mode) ? commandModeFromJSON(object.mode) : 0,
      env: isSet(object.env) ? commandEnvFromJSON(object.env) : 0,
      extensionPath: isSet(object.extensionPath) ? globalThis.String(object.extensionPath) : "",
      entrypoint: isSet(object.entrypoint) ? globalThis.String(object.entrypoint) : "",
      preferenceValues: isObject(object.preferenceValues)
        ? Object.entries(object.preferenceValues).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      argumentValues: isObject(object.argumentValues)
        ? Object.entries(object.argumentValues).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ManagerLoadCommand): unknown {
    const obj: any = {};
    if (message.mode !== 0) {
      obj.mode = commandModeToJSON(message.mode);
    }
    if (message.env !== 0) {
      obj.env = commandEnvToJSON(message.env);
    }
    if (message.extensionPath !== "") {
      obj.extensionPath = message.extensionPath;
    }
    if (message.entrypoint !== "") {
      obj.entrypoint = message.entrypoint;
    }
    if (message.preferenceValues) {
      const entries = Object.entries(message.preferenceValues);
      if (entries.length > 0) {
        obj.preferenceValues = {};
        entries.forEach(([k, v]) => {
          obj.preferenceValues[k] = v;
        });
      }
    }
    if (message.argumentValues) {
      const entries = Object.entries(message.argumentValues);
      if (entries.length > 0) {
        obj.argumentValues = {};
        entries.forEach(([k, v]) => {
          obj.argumentValues[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerLoadCommand>, I>>(base?: I): ManagerLoadCommand {
    return ManagerLoadCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerLoadCommand>, I>>(object: I): ManagerLoadCommand {
    const message = createBaseManagerLoadCommand();
    message.mode = object.mode ?? 0;
    message.env = object.env ?? 0;
    message.extensionPath = object.extensionPath ?? "";
    message.entrypoint = object.entrypoint ?? "";
    message.preferenceValues = Object.entries(object.preferenceValues ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.argumentValues = Object.entries(object.argumentValues ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseManagerLoadCommand_PreferenceValuesEntry(): ManagerLoadCommand_PreferenceValuesEntry {
  return { key: "", value: undefined };
}

export const ManagerLoadCommand_PreferenceValuesEntry: MessageFns<ManagerLoadCommand_PreferenceValuesEntry> = {
  encode(message: ManagerLoadCommand_PreferenceValuesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerLoadCommand_PreferenceValuesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerLoadCommand_PreferenceValuesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagerLoadCommand_PreferenceValuesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: ManagerLoadCommand_PreferenceValuesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerLoadCommand_PreferenceValuesEntry>, I>>(
    base?: I,
  ): ManagerLoadCommand_PreferenceValuesEntry {
    return ManagerLoadCommand_PreferenceValuesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerLoadCommand_PreferenceValuesEntry>, I>>(
    object: I,
  ): ManagerLoadCommand_PreferenceValuesEntry {
    const message = createBaseManagerLoadCommand_PreferenceValuesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseManagerLoadCommand_ArgumentValuesEntry(): ManagerLoadCommand_ArgumentValuesEntry {
  return { key: "", value: undefined };
}

export const ManagerLoadCommand_ArgumentValuesEntry: MessageFns<ManagerLoadCommand_ArgumentValuesEntry> = {
  encode(message: ManagerLoadCommand_ArgumentValuesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerLoadCommand_ArgumentValuesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerLoadCommand_ArgumentValuesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagerLoadCommand_ArgumentValuesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: ManagerLoadCommand_ArgumentValuesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerLoadCommand_ArgumentValuesEntry>, I>>(
    base?: I,
  ): ManagerLoadCommand_ArgumentValuesEntry {
    return ManagerLoadCommand_ArgumentValuesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerLoadCommand_ArgumentValuesEntry>, I>>(
    object: I,
  ): ManagerLoadCommand_ArgumentValuesEntry {
    const message = createBaseManagerLoadCommand_ArgumentValuesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseManagerUnloadCommand(): ManagerUnloadCommand {
  return { sessionId: "" };
}

export const ManagerUnloadCommand: MessageFns<ManagerUnloadCommand> = {
  encode(message: ManagerUnloadCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerUnloadCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerUnloadCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagerUnloadCommand {
    return { sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "" };
  },

  toJSON(message: ManagerUnloadCommand): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerUnloadCommand>, I>>(base?: I): ManagerUnloadCommand {
    return ManagerUnloadCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerUnloadCommand>, I>>(object: I): ManagerUnloadCommand {
    const message = createBaseManagerUnloadCommand();
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

function createBaseManagerLoadResponseData(): ManagerLoadResponseData {
  return { sessionId: "" };
}

export const ManagerLoadResponseData: MessageFns<ManagerLoadResponseData> = {
  encode(message: ManagerLoadResponseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerLoadResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerLoadResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagerLoadResponseData {
    return { sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "" };
  },

  toJSON(message: ManagerLoadResponseData): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManagerLoadResponseData>, I>>(base?: I): ManagerLoadResponseData {
    return ManagerLoadResponseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManagerLoadResponseData>, I>>(object: I): ManagerLoadResponseData {
    const message = createBaseManagerLoadResponseData();
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
