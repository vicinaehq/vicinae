// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: oauth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Image } from "./ui";

export const protobufPackage = "proto.ext.oauth";

export enum RedirectMethod {
  Web = 0,
  App = 1,
  AppURI = 2,
  UNRECOGNIZED = -1,
}

export function redirectMethodFromJSON(object: any): RedirectMethod {
  switch (object) {
    case 0:
    case "Web":
      return RedirectMethod.Web;
    case 1:
    case "App":
      return RedirectMethod.App;
    case 2:
    case "AppURI":
      return RedirectMethod.AppURI;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RedirectMethod.UNRECOGNIZED;
  }
}

export function redirectMethodToJSON(object: RedirectMethod): string {
  switch (object) {
    case RedirectMethod.Web:
      return "Web";
    case RedirectMethod.App:
      return "App";
    case RedirectMethod.AppURI:
      return "AppURI";
    case RedirectMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PKCEClientOptions {
  id?: string | undefined;
  name: string;
  /** we need to implement image like schema */
  description: string;
  icon?: Image | undefined;
}

export interface AuthorizeRequest {
  client: PKCEClientOptions | undefined;
  url: string;
}

export interface AuthorizeResponse {
  code: string;
}

export interface Request {
  authorize?: AuthorizeRequest | undefined;
}

export interface Response {
  authorize?: AuthorizeResponse | undefined;
}

function createBasePKCEClientOptions(): PKCEClientOptions {
  return { id: undefined, name: "", description: "", icon: undefined };
}

export const PKCEClientOptions: MessageFns<PKCEClientOptions> = {
  encode(message: PKCEClientOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.icon !== undefined) {
      Image.encode(message.icon, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PKCEClientOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePKCEClientOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.icon = Image.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PKCEClientOptions {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
    };
  },

  toJSON(message: PKCEClientOptions): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PKCEClientOptions>, I>>(base?: I): PKCEClientOptions {
    return PKCEClientOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PKCEClientOptions>, I>>(object: I): PKCEClientOptions {
    const message = createBasePKCEClientOptions();
    message.id = object.id ?? undefined;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    return message;
  },
};

function createBaseAuthorizeRequest(): AuthorizeRequest {
  return { client: undefined, url: "" };
}

export const AuthorizeRequest: MessageFns<AuthorizeRequest> = {
  encode(message: AuthorizeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.client !== undefined) {
      PKCEClientOptions.encode(message.client, writer.uint32(10).fork()).join();
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.client = PKCEClientOptions.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizeRequest {
    return {
      client: isSet(object.client) ? PKCEClientOptions.fromJSON(object.client) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
    };
  },

  toJSON(message: AuthorizeRequest): unknown {
    const obj: any = {};
    if (message.client !== undefined) {
      obj.client = PKCEClientOptions.toJSON(message.client);
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthorizeRequest>, I>>(base?: I): AuthorizeRequest {
    return AuthorizeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthorizeRequest>, I>>(object: I): AuthorizeRequest {
    const message = createBaseAuthorizeRequest();
    message.client = (object.client !== undefined && object.client !== null)
      ? PKCEClientOptions.fromPartial(object.client)
      : undefined;
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseAuthorizeResponse(): AuthorizeResponse {
  return { code: "" };
}

export const AuthorizeResponse: MessageFns<AuthorizeResponse> = {
  encode(message: AuthorizeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizeResponse {
    return { code: isSet(object.code) ? globalThis.String(object.code) : "" };
  },

  toJSON(message: AuthorizeResponse): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthorizeResponse>, I>>(base?: I): AuthorizeResponse {
    return AuthorizeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthorizeResponse>, I>>(object: I): AuthorizeResponse {
    const message = createBaseAuthorizeResponse();
    message.code = object.code ?? "";
    return message;
  },
};

function createBaseRequest(): Request {
  return { authorize: undefined };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorize !== undefined) {
      AuthorizeRequest.encode(message.authorize, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorize = AuthorizeRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return { authorize: isSet(object.authorize) ? AuthorizeRequest.fromJSON(object.authorize) : undefined };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.authorize !== undefined) {
      obj.authorize = AuthorizeRequest.toJSON(message.authorize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.authorize = (object.authorize !== undefined && object.authorize !== null)
      ? AuthorizeRequest.fromPartial(object.authorize)
      : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return { authorize: undefined };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorize !== undefined) {
      AuthorizeResponse.encode(message.authorize, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorize = AuthorizeResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return { authorize: isSet(object.authorize) ? AuthorizeResponse.fromJSON(object.authorize) : undefined };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.authorize !== undefined) {
      obj.authorize = AuthorizeResponse.toJSON(message.authorize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.authorize = (object.authorize !== undefined && object.authorize !== null)
      ? AuthorizeResponse.fromPartial(object.authorize)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
