// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: application.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto.ext.application";

export interface OpenApplicationRequest {
  target: string;
  appId?: string | undefined;
}

export interface ListApplicationRequest {
}

export interface ListApplicationResponse {
  apps: Application[];
}

export interface Request {
  list?: ListApplicationRequest | undefined;
  open?: OpenApplicationRequest | undefined;
}

export interface Response {
  list?: ListApplicationResponse | undefined;
}

export interface Application {
  id: string;
  name: string;
  icon: string;
}

function createBaseOpenApplicationRequest(): OpenApplicationRequest {
  return { target: "", appId: undefined };
}

export const OpenApplicationRequest: MessageFns<OpenApplicationRequest> = {
  encode(message: OpenApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.target !== "") {
      writer.uint32(10).string(message.target);
    }
    if (message.appId !== undefined) {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.target = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenApplicationRequest {
    return {
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      appId: isSet(object.appId) ? globalThis.String(object.appId) : undefined,
    };
  },

  toJSON(message: OpenApplicationRequest): unknown {
    const obj: any = {};
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.appId !== undefined) {
      obj.appId = message.appId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenApplicationRequest>, I>>(base?: I): OpenApplicationRequest {
    return OpenApplicationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenApplicationRequest>, I>>(object: I): OpenApplicationRequest {
    const message = createBaseOpenApplicationRequest();
    message.target = object.target ?? "";
    message.appId = object.appId ?? undefined;
    return message;
  },
};

function createBaseListApplicationRequest(): ListApplicationRequest {
  return {};
}

export const ListApplicationRequest: MessageFns<ListApplicationRequest> = {
  encode(_: ListApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListApplicationRequest {
    return {};
  },

  toJSON(_: ListApplicationRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListApplicationRequest>, I>>(base?: I): ListApplicationRequest {
    return ListApplicationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListApplicationRequest>, I>>(_: I): ListApplicationRequest {
    const message = createBaseListApplicationRequest();
    return message;
  },
};

function createBaseListApplicationResponse(): ListApplicationResponse {
  return { apps: [] };
}

export const ListApplicationResponse: MessageFns<ListApplicationResponse> = {
  encode(message: ListApplicationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apps) {
      Application.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApplicationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApplicationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.apps.push(Application.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApplicationResponse {
    return { apps: globalThis.Array.isArray(object?.apps) ? object.apps.map((e: any) => Application.fromJSON(e)) : [] };
  },

  toJSON(message: ListApplicationResponse): unknown {
    const obj: any = {};
    if (message.apps?.length) {
      obj.apps = message.apps.map((e) => Application.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListApplicationResponse>, I>>(base?: I): ListApplicationResponse {
    return ListApplicationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListApplicationResponse>, I>>(object: I): ListApplicationResponse {
    const message = createBaseListApplicationResponse();
    message.apps = object.apps?.map((e) => Application.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRequest(): Request {
  return { list: undefined, open: undefined };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.list !== undefined) {
      ListApplicationRequest.encode(message.list, writer.uint32(10).fork()).join();
    }
    if (message.open !== undefined) {
      OpenApplicationRequest.encode(message.open, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.list = ListApplicationRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.open = OpenApplicationRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      list: isSet(object.list) ? ListApplicationRequest.fromJSON(object.list) : undefined,
      open: isSet(object.open) ? OpenApplicationRequest.fromJSON(object.open) : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.list !== undefined) {
      obj.list = ListApplicationRequest.toJSON(message.list);
    }
    if (message.open !== undefined) {
      obj.open = OpenApplicationRequest.toJSON(message.open);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.list = (object.list !== undefined && object.list !== null)
      ? ListApplicationRequest.fromPartial(object.list)
      : undefined;
    message.open = (object.open !== undefined && object.open !== null)
      ? OpenApplicationRequest.fromPartial(object.open)
      : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return { list: undefined };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.list !== undefined) {
      ListApplicationResponse.encode(message.list, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.list = ListApplicationResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return { list: isSet(object.list) ? ListApplicationResponse.fromJSON(object.list) : undefined };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.list !== undefined) {
      obj.list = ListApplicationResponse.toJSON(message.list);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.list = (object.list !== undefined && object.list !== null)
      ? ListApplicationResponse.fromPartial(object.list)
      : undefined;
    return message;
  },
};

function createBaseApplication(): Application {
  return { id: "", name: "", icon: "" };
}

export const Application: MessageFns<Application> = {
  encode(message: Application, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.icon !== "") {
      writer.uint32(26).string(message.icon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Application {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Application {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
    };
  },

  toJSON(message: Application): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Application>, I>>(base?: I): Application {
    return Application.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Application>, I>>(object: I): Application {
    const message = createBaseApplication();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.icon = object.icon ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
