// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: clipboard.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto.ext.clipboard";

export interface ClipboardHtmlContent {
  html: string;
  text: string;
}

export interface ClipboardPathContent {
  path: string;
}

export interface ClipboardOptions {
  concealed: boolean;
}

export interface CopyToClipboardRequest {
  content: ClipboardContent | undefined;
  options: ClipboardOptions | undefined;
}

export interface PasteToClipboardRequest {
  content: ClipboardContent | undefined;
}

export interface ClipboardContent {
  text?: string | undefined;
  html?: ClipboardHtmlContent | undefined;
  path?: ClipboardPathContent | undefined;
}

export interface CopyToClipboardResponse {
}

export interface PasteToClipboardResponse {
}

export interface Request {
  copy?: CopyToClipboardRequest | undefined;
  paste?: PasteToClipboardRequest | undefined;
}

export interface Response {
  copy?: CopyToClipboardResponse | undefined;
  paste?: PasteToClipboardResponse | undefined;
}

function createBaseClipboardHtmlContent(): ClipboardHtmlContent {
  return { html: "", text: "" };
}

export const ClipboardHtmlContent: MessageFns<ClipboardHtmlContent> = {
  encode(message: ClipboardHtmlContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.html !== "") {
      writer.uint32(10).string(message.html);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClipboardHtmlContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClipboardHtmlContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.html = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClipboardHtmlContent {
    return {
      html: isSet(object.html) ? globalThis.String(object.html) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
    };
  },

  toJSON(message: ClipboardHtmlContent): unknown {
    const obj: any = {};
    if (message.html !== "") {
      obj.html = message.html;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClipboardHtmlContent>, I>>(base?: I): ClipboardHtmlContent {
    return ClipboardHtmlContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClipboardHtmlContent>, I>>(object: I): ClipboardHtmlContent {
    const message = createBaseClipboardHtmlContent();
    message.html = object.html ?? "";
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseClipboardPathContent(): ClipboardPathContent {
  return { path: "" };
}

export const ClipboardPathContent: MessageFns<ClipboardPathContent> = {
  encode(message: ClipboardPathContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClipboardPathContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClipboardPathContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClipboardPathContent {
    return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
  },

  toJSON(message: ClipboardPathContent): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClipboardPathContent>, I>>(base?: I): ClipboardPathContent {
    return ClipboardPathContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClipboardPathContent>, I>>(object: I): ClipboardPathContent {
    const message = createBaseClipboardPathContent();
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseClipboardOptions(): ClipboardOptions {
  return { concealed: false };
}

export const ClipboardOptions: MessageFns<ClipboardOptions> = {
  encode(message: ClipboardOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.concealed !== false) {
      writer.uint32(8).bool(message.concealed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClipboardOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClipboardOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.concealed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClipboardOptions {
    return { concealed: isSet(object.concealed) ? globalThis.Boolean(object.concealed) : false };
  },

  toJSON(message: ClipboardOptions): unknown {
    const obj: any = {};
    if (message.concealed !== false) {
      obj.concealed = message.concealed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClipboardOptions>, I>>(base?: I): ClipboardOptions {
    return ClipboardOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClipboardOptions>, I>>(object: I): ClipboardOptions {
    const message = createBaseClipboardOptions();
    message.concealed = object.concealed ?? false;
    return message;
  },
};

function createBaseCopyToClipboardRequest(): CopyToClipboardRequest {
  return { content: undefined, options: undefined };
}

export const CopyToClipboardRequest: MessageFns<CopyToClipboardRequest> = {
  encode(message: CopyToClipboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== undefined) {
      ClipboardContent.encode(message.content, writer.uint32(10).fork()).join();
    }
    if (message.options !== undefined) {
      ClipboardOptions.encode(message.options, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CopyToClipboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCopyToClipboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = ClipboardContent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.options = ClipboardOptions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CopyToClipboardRequest {
    return {
      content: isSet(object.content) ? ClipboardContent.fromJSON(object.content) : undefined,
      options: isSet(object.options) ? ClipboardOptions.fromJSON(object.options) : undefined,
    };
  },

  toJSON(message: CopyToClipboardRequest): unknown {
    const obj: any = {};
    if (message.content !== undefined) {
      obj.content = ClipboardContent.toJSON(message.content);
    }
    if (message.options !== undefined) {
      obj.options = ClipboardOptions.toJSON(message.options);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CopyToClipboardRequest>, I>>(base?: I): CopyToClipboardRequest {
    return CopyToClipboardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CopyToClipboardRequest>, I>>(object: I): CopyToClipboardRequest {
    const message = createBaseCopyToClipboardRequest();
    message.content = (object.content !== undefined && object.content !== null)
      ? ClipboardContent.fromPartial(object.content)
      : undefined;
    message.options = (object.options !== undefined && object.options !== null)
      ? ClipboardOptions.fromPartial(object.options)
      : undefined;
    return message;
  },
};

function createBasePasteToClipboardRequest(): PasteToClipboardRequest {
  return { content: undefined };
}

export const PasteToClipboardRequest: MessageFns<PasteToClipboardRequest> = {
  encode(message: PasteToClipboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== undefined) {
      ClipboardContent.encode(message.content, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PasteToClipboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePasteToClipboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = ClipboardContent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PasteToClipboardRequest {
    return { content: isSet(object.content) ? ClipboardContent.fromJSON(object.content) : undefined };
  },

  toJSON(message: PasteToClipboardRequest): unknown {
    const obj: any = {};
    if (message.content !== undefined) {
      obj.content = ClipboardContent.toJSON(message.content);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PasteToClipboardRequest>, I>>(base?: I): PasteToClipboardRequest {
    return PasteToClipboardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PasteToClipboardRequest>, I>>(object: I): PasteToClipboardRequest {
    const message = createBasePasteToClipboardRequest();
    message.content = (object.content !== undefined && object.content !== null)
      ? ClipboardContent.fromPartial(object.content)
      : undefined;
    return message;
  },
};

function createBaseClipboardContent(): ClipboardContent {
  return { text: undefined, html: undefined, path: undefined };
}

export const ClipboardContent: MessageFns<ClipboardContent> = {
  encode(message: ClipboardContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(10).string(message.text);
    }
    if (message.html !== undefined) {
      ClipboardHtmlContent.encode(message.html, writer.uint32(18).fork()).join();
    }
    if (message.path !== undefined) {
      ClipboardPathContent.encode(message.path, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClipboardContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClipboardContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.html = ClipboardHtmlContent.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = ClipboardPathContent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClipboardContent {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      html: isSet(object.html) ? ClipboardHtmlContent.fromJSON(object.html) : undefined,
      path: isSet(object.path) ? ClipboardPathContent.fromJSON(object.path) : undefined,
    };
  },

  toJSON(message: ClipboardContent): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.html !== undefined) {
      obj.html = ClipboardHtmlContent.toJSON(message.html);
    }
    if (message.path !== undefined) {
      obj.path = ClipboardPathContent.toJSON(message.path);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClipboardContent>, I>>(base?: I): ClipboardContent {
    return ClipboardContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClipboardContent>, I>>(object: I): ClipboardContent {
    const message = createBaseClipboardContent();
    message.text = object.text ?? undefined;
    message.html = (object.html !== undefined && object.html !== null)
      ? ClipboardHtmlContent.fromPartial(object.html)
      : undefined;
    message.path = (object.path !== undefined && object.path !== null)
      ? ClipboardPathContent.fromPartial(object.path)
      : undefined;
    return message;
  },
};

function createBaseCopyToClipboardResponse(): CopyToClipboardResponse {
  return {};
}

export const CopyToClipboardResponse: MessageFns<CopyToClipboardResponse> = {
  encode(_: CopyToClipboardResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CopyToClipboardResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCopyToClipboardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CopyToClipboardResponse {
    return {};
  },

  toJSON(_: CopyToClipboardResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CopyToClipboardResponse>, I>>(base?: I): CopyToClipboardResponse {
    return CopyToClipboardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CopyToClipboardResponse>, I>>(_: I): CopyToClipboardResponse {
    const message = createBaseCopyToClipboardResponse();
    return message;
  },
};

function createBasePasteToClipboardResponse(): PasteToClipboardResponse {
  return {};
}

export const PasteToClipboardResponse: MessageFns<PasteToClipboardResponse> = {
  encode(_: PasteToClipboardResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PasteToClipboardResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePasteToClipboardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PasteToClipboardResponse {
    return {};
  },

  toJSON(_: PasteToClipboardResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PasteToClipboardResponse>, I>>(base?: I): PasteToClipboardResponse {
    return PasteToClipboardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PasteToClipboardResponse>, I>>(_: I): PasteToClipboardResponse {
    const message = createBasePasteToClipboardResponse();
    return message;
  },
};

function createBaseRequest(): Request {
  return { copy: undefined, paste: undefined };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.copy !== undefined) {
      CopyToClipboardRequest.encode(message.copy, writer.uint32(10).fork()).join();
    }
    if (message.paste !== undefined) {
      PasteToClipboardRequest.encode(message.paste, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.copy = CopyToClipboardRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.paste = PasteToClipboardRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      copy: isSet(object.copy) ? CopyToClipboardRequest.fromJSON(object.copy) : undefined,
      paste: isSet(object.paste) ? PasteToClipboardRequest.fromJSON(object.paste) : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.copy !== undefined) {
      obj.copy = CopyToClipboardRequest.toJSON(message.copy);
    }
    if (message.paste !== undefined) {
      obj.paste = PasteToClipboardRequest.toJSON(message.paste);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.copy = (object.copy !== undefined && object.copy !== null)
      ? CopyToClipboardRequest.fromPartial(object.copy)
      : undefined;
    message.paste = (object.paste !== undefined && object.paste !== null)
      ? PasteToClipboardRequest.fromPartial(object.paste)
      : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return { copy: undefined, paste: undefined };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.copy !== undefined) {
      CopyToClipboardResponse.encode(message.copy, writer.uint32(10).fork()).join();
    }
    if (message.paste !== undefined) {
      PasteToClipboardResponse.encode(message.paste, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.copy = CopyToClipboardResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.paste = PasteToClipboardResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      copy: isSet(object.copy) ? CopyToClipboardResponse.fromJSON(object.copy) : undefined,
      paste: isSet(object.paste) ? PasteToClipboardResponse.fromJSON(object.paste) : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.copy !== undefined) {
      obj.copy = CopyToClipboardResponse.toJSON(message.copy);
    }
    if (message.paste !== undefined) {
      obj.paste = PasteToClipboardResponse.toJSON(message.paste);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.copy = (object.copy !== undefined && object.copy !== null)
      ? CopyToClipboardResponse.fromPartial(object.copy)
      : undefined;
    message.paste = (object.paste !== undefined && object.paste !== null)
      ? PasteToClipboardResponse.fromPartial(object.paste)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
