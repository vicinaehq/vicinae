// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: storage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "./google/protobuf/struct";

export const protobufPackage = "proto.ext.storage";

export interface ClearRequest {
}

export interface GetRequest {
  key: string;
}

export interface GetResponse {
  value: any | undefined;
}

export interface SetResponse {
}

export interface SetRequest {
  key: string;
  value: any | undefined;
}

export interface RemoveRequest {
  key: string;
}

export interface RemoveResponse {
}

export interface ClearResponse {
}

export interface ListRequest {
}

export interface ListResponse {
  values: { [key: string]: any | undefined };
}

export interface ListResponse_ValuesEntry {
  key: string;
  value: any | undefined;
}

export interface Request {
  get?: GetRequest | undefined;
  set?: SetRequest | undefined;
  remove?: RemoveRequest | undefined;
  clear?: ClearRequest | undefined;
  list?: ListRequest | undefined;
}

export interface Response {
  get?: GetResponse | undefined;
  set?: SetResponse | undefined;
  remove?: RemoveResponse | undefined;
  clear?: ClearResponse | undefined;
  list?: ListResponse | undefined;
}

function createBaseClearRequest(): ClearRequest {
  return {};
}

export const ClearRequest: MessageFns<ClearRequest> = {
  encode(_: ClearRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClearRequest {
    return {};
  },

  toJSON(_: ClearRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearRequest>, I>>(base?: I): ClearRequest {
    return ClearRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearRequest>, I>>(_: I): ClearRequest {
    const message = createBaseClearRequest();
    return message;
  },
};

function createBaseGetRequest(): GetRequest {
  return { key: "" };
}

export const GetRequest: MessageFns<GetRequest> = {
  encode(message: GetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRequest {
    return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
  },

  toJSON(message: GetRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRequest>, I>>(base?: I): GetRequest {
    return GetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRequest>, I>>(object: I): GetRequest {
    const message = createBaseGetRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseGetResponse(): GetResponse {
  return { value: undefined };
}

export const GetResponse: MessageFns<GetResponse> = {
  encode(message: GetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetResponse {
    return { value: isSet(object?.value) ? object.value : undefined };
  },

  toJSON(message: GetResponse): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetResponse>, I>>(base?: I): GetResponse {
    return GetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetResponse>, I>>(object: I): GetResponse {
    const message = createBaseGetResponse();
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseSetResponse(): SetResponse {
  return {};
}

export const SetResponse: MessageFns<SetResponse> = {
  encode(_: SetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetResponse {
    return {};
  },

  toJSON(_: SetResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetResponse>, I>>(base?: I): SetResponse {
    return SetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetResponse>, I>>(_: I): SetResponse {
    const message = createBaseSetResponse();
    return message;
  },
};

function createBaseSetRequest(): SetRequest {
  return { key: "", value: undefined };
}

export const SetRequest: MessageFns<SetRequest> = {
  encode(message: SetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRequest {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: SetRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetRequest>, I>>(base?: I): SetRequest {
    return SetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetRequest>, I>>(object: I): SetRequest {
    const message = createBaseSetRequest();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseRemoveRequest(): RemoveRequest {
  return { key: "" };
}

export const RemoveRequest: MessageFns<RemoveRequest> = {
  encode(message: RemoveRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveRequest {
    return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
  },

  toJSON(message: RemoveRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveRequest>, I>>(base?: I): RemoveRequest {
    return RemoveRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveRequest>, I>>(object: I): RemoveRequest {
    const message = createBaseRemoveRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseRemoveResponse(): RemoveResponse {
  return {};
}

export const RemoveResponse: MessageFns<RemoveResponse> = {
  encode(_: RemoveResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveResponse {
    return {};
  },

  toJSON(_: RemoveResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveResponse>, I>>(base?: I): RemoveResponse {
    return RemoveResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveResponse>, I>>(_: I): RemoveResponse {
    const message = createBaseRemoveResponse();
    return message;
  },
};

function createBaseClearResponse(): ClearResponse {
  return {};
}

export const ClearResponse: MessageFns<ClearResponse> = {
  encode(_: ClearResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClearResponse {
    return {};
  },

  toJSON(_: ClearResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearResponse>, I>>(base?: I): ClearResponse {
    return ClearResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearResponse>, I>>(_: I): ClearResponse {
    const message = createBaseClearResponse();
    return message;
  },
};

function createBaseListRequest(): ListRequest {
  return {};
}

export const ListRequest: MessageFns<ListRequest> = {
  encode(_: ListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListRequest {
    return {};
  },

  toJSON(_: ListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRequest>, I>>(base?: I): ListRequest {
    return ListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRequest>, I>>(_: I): ListRequest {
    const message = createBaseListRequest();
    return message;
  },
};

function createBaseListResponse(): ListResponse {
  return { values: {} };
}

export const ListResponse: MessageFns<ListResponse> = {
  encode(message: ListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.values).forEach(([key, value]) => {
      if (value !== undefined) {
        ListResponse_ValuesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = ListResponse_ValuesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.values[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListResponse {
    return {
      values: isObject(object.values)
        ? Object.entries(object.values).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ListResponse): unknown {
    const obj: any = {};
    if (message.values) {
      const entries = Object.entries(message.values);
      if (entries.length > 0) {
        obj.values = {};
        entries.forEach(([k, v]) => {
          obj.values[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListResponse>, I>>(base?: I): ListResponse {
    return ListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListResponse>, I>>(object: I): ListResponse {
    const message = createBaseListResponse();
    message.values = Object.entries(object.values ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseListResponse_ValuesEntry(): ListResponse_ValuesEntry {
  return { key: "", value: undefined };
}

export const ListResponse_ValuesEntry: MessageFns<ListResponse_ValuesEntry> = {
  encode(message: ListResponse_ValuesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListResponse_ValuesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListResponse_ValuesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListResponse_ValuesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: ListResponse_ValuesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListResponse_ValuesEntry>, I>>(base?: I): ListResponse_ValuesEntry {
    return ListResponse_ValuesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListResponse_ValuesEntry>, I>>(object: I): ListResponse_ValuesEntry {
    const message = createBaseListResponse_ValuesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseRequest(): Request {
  return { get: undefined, set: undefined, remove: undefined, clear: undefined, list: undefined };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.get !== undefined) {
      GetRequest.encode(message.get, writer.uint32(10).fork()).join();
    }
    if (message.set !== undefined) {
      SetRequest.encode(message.set, writer.uint32(18).fork()).join();
    }
    if (message.remove !== undefined) {
      RemoveRequest.encode(message.remove, writer.uint32(26).fork()).join();
    }
    if (message.clear !== undefined) {
      ClearRequest.encode(message.clear, writer.uint32(34).fork()).join();
    }
    if (message.list !== undefined) {
      ListRequest.encode(message.list, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.get = GetRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.set = SetRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.remove = RemoveRequest.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clear = ClearRequest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.list = ListRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      get: isSet(object.get) ? GetRequest.fromJSON(object.get) : undefined,
      set: isSet(object.set) ? SetRequest.fromJSON(object.set) : undefined,
      remove: isSet(object.remove) ? RemoveRequest.fromJSON(object.remove) : undefined,
      clear: isSet(object.clear) ? ClearRequest.fromJSON(object.clear) : undefined,
      list: isSet(object.list) ? ListRequest.fromJSON(object.list) : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.get !== undefined) {
      obj.get = GetRequest.toJSON(message.get);
    }
    if (message.set !== undefined) {
      obj.set = SetRequest.toJSON(message.set);
    }
    if (message.remove !== undefined) {
      obj.remove = RemoveRequest.toJSON(message.remove);
    }
    if (message.clear !== undefined) {
      obj.clear = ClearRequest.toJSON(message.clear);
    }
    if (message.list !== undefined) {
      obj.list = ListRequest.toJSON(message.list);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.get = (object.get !== undefined && object.get !== null) ? GetRequest.fromPartial(object.get) : undefined;
    message.set = (object.set !== undefined && object.set !== null) ? SetRequest.fromPartial(object.set) : undefined;
    message.remove = (object.remove !== undefined && object.remove !== null)
      ? RemoveRequest.fromPartial(object.remove)
      : undefined;
    message.clear = (object.clear !== undefined && object.clear !== null)
      ? ClearRequest.fromPartial(object.clear)
      : undefined;
    message.list = (object.list !== undefined && object.list !== null)
      ? ListRequest.fromPartial(object.list)
      : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return { get: undefined, set: undefined, remove: undefined, clear: undefined, list: undefined };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.get !== undefined) {
      GetResponse.encode(message.get, writer.uint32(10).fork()).join();
    }
    if (message.set !== undefined) {
      SetResponse.encode(message.set, writer.uint32(18).fork()).join();
    }
    if (message.remove !== undefined) {
      RemoveResponse.encode(message.remove, writer.uint32(26).fork()).join();
    }
    if (message.clear !== undefined) {
      ClearResponse.encode(message.clear, writer.uint32(34).fork()).join();
    }
    if (message.list !== undefined) {
      ListResponse.encode(message.list, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.get = GetResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.set = SetResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.remove = RemoveResponse.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clear = ClearResponse.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.list = ListResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      get: isSet(object.get) ? GetResponse.fromJSON(object.get) : undefined,
      set: isSet(object.set) ? SetResponse.fromJSON(object.set) : undefined,
      remove: isSet(object.remove) ? RemoveResponse.fromJSON(object.remove) : undefined,
      clear: isSet(object.clear) ? ClearResponse.fromJSON(object.clear) : undefined,
      list: isSet(object.list) ? ListResponse.fromJSON(object.list) : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.get !== undefined) {
      obj.get = GetResponse.toJSON(message.get);
    }
    if (message.set !== undefined) {
      obj.set = SetResponse.toJSON(message.set);
    }
    if (message.remove !== undefined) {
      obj.remove = RemoveResponse.toJSON(message.remove);
    }
    if (message.clear !== undefined) {
      obj.clear = ClearResponse.toJSON(message.clear);
    }
    if (message.list !== undefined) {
      obj.list = ListResponse.toJSON(message.list);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.get = (object.get !== undefined && object.get !== null) ? GetResponse.fromPartial(object.get) : undefined;
    message.set = (object.set !== undefined && object.set !== null) ? SetResponse.fromPartial(object.set) : undefined;
    message.remove = (object.remove !== undefined && object.remove !== null)
      ? RemoveResponse.fromPartial(object.remove)
      : undefined;
    message.clear = (object.clear !== undefined && object.clear !== null)
      ? ClearResponse.fromPartial(object.clear)
      : undefined;
    message.list = (object.list !== undefined && object.list !== null)
      ? ListResponse.fromPartial(object.list)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
